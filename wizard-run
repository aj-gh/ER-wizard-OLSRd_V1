#!/bin/bash

#
# EdgeMAX Wizard "OLSRd_V1" created 03/2016 by Onetrix.net for FunkFeuer.at
# Version [0962a/201806271]
# ^-- previous line is used from bmk-webstatus-package as version identification, dont remove "Version "
#
# Github repository: https://github.com/vchrizz/ER-wizard-OLSRd_V1/
#
# Works on all EdgeRouter and EdgePoint Devices (system version 1.9.0+)
#
# known bugs:
# *) WebUI: feature wizard "TCP MSS clamping" hangs when feature wizard "OLSRd_V1" is added
# *) wizard.html: wrong position of olsrd logo in mozilla firefox (10px lower than should be)
# updates:
# *) 06/2018 wizard totally re-written, including olsrd 0.9.6.2-1 aka "pre-0.9.7"
#

ACTION=$1
INPUT=$2

log="/var/log/0xffolsrd.log"
cfgusrdir="/config/user-data/"
olsrddir="/config/olsrd/"
olsrd4conf="${olsrddir}olsrd4.conf"
olsrd4def="${olsrddir}olsrd4default"
olsrd4default='/etc/default/olsrd'
olsrd4init='/etc/init.d/olsrd'
olsrd6conf="${olsrddir}olsrd6.conf"
olsrd6def="${olsrddir}olsrd6default"
olsrd6default='/etc/default/olsrd6'
olsrd6init='/etc/init.d/olsrd6'
olsrdsetupscriptfile="/config/scripts/post-config.d/olsrd_setup.sh"

#define update sources on github
gitowner="vchrizz"
gitrepo="ER-wizard-OLSRd_V1"
gitbranch="prepare-097"

#
# DO NOT EDIT BELOW HERE !
#

echo "EdgeMAX OLSRd_V1 Wizard started $(date +%Y-%m-%d/%H:%M:%S.%N) - Session="$$ >>$log

#function to write setup-script
writesetupscript () {
    cat >/tmp/olsrdsetupscriptfile <<'ENDSCRIPTCONTENT'
#!/bin/bash
log="/var/log/0xffolsrd.log"
cfgusrdir="/config/user-data/"
olsrddir="/config/olsrd/"
olsrd4conf="${olsrddir}olsrd4.conf"
olsrd4def="${olsrddir}olsrd4default"
olsrd4default='/etc/default/olsrd'
olsrd4init='/etc/init.d/olsrd'
olsrd6conf="${olsrddir}olsrd6.conf"
olsrd6def="${olsrddir}olsrd6default"
olsrd6default='/etc/default/olsrd6'
olsrd6init='/etc/init.d/olsrd6'
echo "Running olsrdsetupscriptfile script... $(date +%Y-%m-%d/%H:%M:%S.%N)" >>$log
if [ -x /usr/sbin/olsrd ] && 
   [ -f $olsrd4conf ] && 
   (awk -F"-f " '/DAEMON_OPTS/{print $2}' $olsrd4default | tr -d \" | grep -q "$olsrd4conf") &&
   [ -x /usr/sbin/olsrd6 ] && 
   [ -f $olsrd6conf ] && 
   (awk -F"-f " '/DAEMON_OPTS/{print $2}' $olsrd6default | tr -d \" | grep -q "$olsrd6conf")
   then
        echo "olsrd seems to be installed $(date +%Y-%m-%d/%H:%M:%S.%N)" >>$log
        exit 0
fi
olsrdv1wizard=""
for i in $(find /config/wizard/feature/ -name wizard-run | grep -i olsr); do
    if [[ $(head $i -n 10 | grep 'OLSRd_V1') ]]; then
        olsrdv1wizard=$i
        break
    fi
done
if [ ! $olsrdv1wizard ]; then
    echo "error: OLSRd_V1 wizard not found!" >>$log
    exit
fi
echo '#!/bin/bash' >func.sh
sed -n "/^write_ntp_script ()/,/^}/p" $olsrdv1wizard >>func.sh
sed -n "/^mask_to_prefix ()/,/^}/p" $olsrdv1wizard >>func.sh
sed -n "/^installolsrd ()/,/^}/p" $olsrdv1wizard >>func.sh
sed -n "/^setupv4olsrd ()/,/^}/p" $olsrdv1wizard >>func.sh
sed -n "/^setupv6olsrd ()/,/^}/p" $olsrdv1wizard >>func.sh
sed -n "/^load ()/,/^}/p" $olsrdv1wizard >>func.sh
source func.sh
load >>$log 2>>$log
rm -f func.sh 
$olsrd4init restart >>$log 2>>$log
$olsrd6init restart >>$log 2>>$log
echo "Finished olsrdsetupscriptfile script... $(date +%Y-%m-%d/%H:%M:%S.%N)" >>$log
exit 0
ENDSCRIPTCONTENT
}

write_ntp_script () {
    cat >/config/scripts/post-config.d/olsr-after-ntp.sh <<'ENDSCRIPTCONTENT'
#!/bin/sh
# system time and date might be wrong prior to internet connectivity AND ntp sync:
# - on cold restart (restored power) the system clock is 2015-01-01
# - during a reboot the system clock gets frozen for approximatly 50 seconds
# - after internet connectivity is restored, ntpd will set the correct date and time somewhen
# this script will restart olsrd after ntp in order to make olsrd-httpinfo-plugin report "uptime" correctly

LOG=/tmp/olsr-after-ntp.log
if [ $(date +%s) -lt 1529900000 ] &&
   [ -f /etc/init.d/olsrd ] &&
   [ $(sed -e 's/[ \t]*#.*$//' -e '/^[ ]*$/d' /etc/default/olsrd 2>/dev/null | grep -icE "START_OLSRD[ \t]*=[ \"\t]*YES") -eq 1 ]
then
    (echo $(date)" - Checking sync of ntp..." >>$LOG
    p="ping -nq -c1 -w1 8.8.8.8"; c=1
    until $p >/dev/null 2>&1; do
      echo $(date)" - Waiting for network ($c)..." >>$LOG
      c=$(($c+1))
      sleep 3
      [ $c -gt 300 ] && echo $(date)"Giving up..." >>$LOG && break
    done
    if [ $c -le 300 ]; then
        /etc/init.d/ntp stop >>$LOG 2>&1
        /usr/sbin/ntpdate-debian time.nist.gov >>$LOG 2>&1
        echo $(date)" - new date is set..." >>$LOG
        /etc/init.d/ntp start >>$LOG 2>&1
        [ $(pgrep -x olsrd) ] && sudo /etc/init.d/olsrd restart >>$LOG 2>&1
    fi
    echo $(date)" - exit $0..." >>$LOG ) &
    echo $(date)" - preperation done" >>$LOG
else
    echo $(date)" - startup-date seems fine or olsrd not configured to start." >>$LOG
fi
exit 0
ENDSCRIPTCONTENT
    chmod 755 /config/scripts/post-config.d/olsr-after-ntp.sh
}


#base64begin: olsrd packages for offline use
# !dont edit or remove this comment!
# other files than wizard-run/wizard.html/validator.json are ignored when uploading wizards to the router.
# if no internet connection is possible for download, we need to upload olsrd packages manually (e.g. via scp).
# here are the required packages for mips and mipsel in base64 format.
# they will be extracted into $cfgusrdir at first run of this script.
#

echo "Starting Wizard-Installation Block ... $(date +%Y-%m-%d/%H:%M:%S.%N)" >>$log

# migrate ebtables command to correct location
if [ $(grep -E "^#olsrdwizard:|^ebtables\ \-P\ FORWARD\ DROP" /etc/rc.local | wc -l) == 2 ]; then
    # old setup using rc.local detected, migrate to pre-config.d
    sed -i '/^#olsrdwizard:.*/d' /etc/rc.local >>$log 2>>$log
    sed -i '/^ebtables\ \-P\ FORWARD\ DROP/d' /etc/rc.local >>$log 2>>$log
    if [ ! -d /config/scripts/pre-config.d ]; then
        # create missing directory
        mkdir /config/scripts/pre-config.d >>$log 2>>$log
        chmod --reference=/config/scripts/post-config.d /config/scripts/pre-config.d >>$log 2>>$log
        chown --reference=/config/scripts/post-config.d /config/scripts/pre-config.d >>$log 2>>$log
    fi
    if [ ! -f /config/scripts/pre-config.d/ebtables.sh ]; then
        echo -e '#!/bin/sh\n#olsrdwizard: dont forward ethernet frames between bridge ports\nebtables -P FORWARD DROP\nexit 0' > /config/scripts/pre-config.d/ebtables.sh
        chmod 755 /config/scripts/pre-config.d/ebtables.sh
    fi
fi

# rewrite setup script file to be up-to-date
writesetupscript
if [ -f $olsrdsetupscriptfile ]; then    #enabled
    cp -f /tmp/olsrdsetupscriptfile $olsrdsetupscriptfile
    chmod +x $olsrdsetupscriptfile
    rm /tmp/olsrdsetupscriptfile
else    #disabled, save to user-data
    cp -f /tmp/olsrdsetupscriptfile $olsrddir$(basename $olsrdsetupscriptfile) >/dev/null
    chmod +x $olsrddir$(basename $olsrdsetupscriptfile) >/dev/null
    rm /tmp/olsrdsetupscriptfile
fi

#Remove future versions from user-data directory
#rm -f /config/user-data/olsrd*0.9.6.2-1*.deb >/dev/null
rm -f /config/user-data/olsrd*0.9.5-1*.deb >/dev/null

# CPO remove old installer script!
echo "clean up old install-scripts and package files..." >>$log
[ -f olsrd-install.log ] && rm -f olsrd-install.log
[ -f /config/user-data/olsrd-install.log ] && rm -f /config/user-data/olsrd-install.log
[ -f "/config/scripts/post-config.d/install_olsrdv4.sh" ] && rm /config/scripts/post-config.d/install_olsrdv4.sh >>$log
[ -f "/config/scripts/post-config.d/install_olsrdv6.sh" ] && rm /config/scripts/post-config.d/install_olsrdv6.sh >>$log
[ -f "/config/user-data/olsrd_setup.sh" ] && rm /config/user-data/olsrd_setup.sh >>$log
[ -f "/config/user-data/dpkg.log" ] && rm /config/user-data/dpkg.log >>$log
[ -f "/config/user-data/dpkg.sh" ] && rm /config/user-data/dpkg.sh >>$log
[ -f "/config/user-data/olsrd-plugins_0.6.6.2-1_mipsel.deb" ] && rm /config/user-data/olsrd-plugins_0.6.6.2-1_mipsel.deb >>$log
[ -f "/config/user-data/olsrd_0.6.6.2-1_mipsel.deb" ] && rm /config/user-data/olsrd_0.6.6.2-1_mipsel.deb >>$log
[ -f "/config/user-data/olsrd-plugins_0.6.6.2-1_mips.deb" ] && rm /config/user-data/olsrd-plugins_0.6.6.2-1_mips.deb >>$log
[ -f "/config/user-data/olsrd_0.6.6.2-1_mips.deb" ] && rm /config/user-data/olsrd_0.6.6.2-1_mips.deb >>$log
[ -f "/config/user-data/0xFF-BMK-webstatus_1.0.deb" ] && rm /config/user-data/0xFF-BMK-webstatus_1.0.deb >>$log
[ -f "/config/user-data/0xFF-BMK-webstatus_1.4.deb" ] && rm /config/user-data/0xFF-BMK-webstatus_1.4.deb >>$log
[ -f "/etc/olsrdwatchdog" ] && rm /etc/olsrdwatchdog >>$log

[ $(echo -n I | od -to2 | awk '{ print substr($2,6,1); exit}') == 0 ] && arch='mips' || arch='mipsel'

echo "detected $arch architecture, extracting packages olsrd and olsrd-plugins ..." >>$log
if [ $arch == 'mips' ]; then
# base64: olsrd_0.9.0.3-1_mips.deb
echo "
" | base64 -d > $cfgusrdir/olsrd_0.9.0.3-1_mips.deb
[[ $? == 0 ]] && echo "extracted $arch olsrd." >>$log || echo "extraction of $arch olsrd failed" >>$log
# base64: olsrd-plugins_0.9.0.3-1_mips.deb
echo "
" | base64 -d > $cfgusrdir/olsrd-plugins_0.9.0.3-1_mips.deb
[[ $? == 0 ]] && echo "extracted $arch olsrd-plugins." >>$log || echo "extraction of $arch olsrd-plugins failed" >>$log
fi

if [ $arch == 'mipsel' ]; then
# base64: olsrd_0.9.0.3-1_mipsel.deb
echo "
" | base64 -d > $cfgusrdir/olsrd_0.9.0.3-1_mipsel.deb
[[ $? == 0 ]] && echo "extracted $arch olsrd." >>$log || echo "extraction of $arch olsrd failed" >>$log
# base64: olsrd-plugins_0.9.0.3-1_mipsel.deb
echo "
" | base64 -d > $cfgusrdir/olsrd-plugins_0.9.0.3-1_mipsel.deb
[[ $? == 0 ]] && echo "extracted $arch olsrd-plugins." >>$log || echo "extraction of $arch olsrd-plugins failed" >>$log
fi
echo "extracted packages olsrd and olsrd-plugins" >>$log

echo "Finished Wizard-Installation Block ... $(date +%Y-%m-%d/%H:%M:%S.%N)" >>$log
sed -i '/^#base64begin/,/^#base64end$/d' $0
# !dont edit or remove this comment!
#base64end

function valid_ip () {
    local  ip=$1
    local  stat=1
    if [[ $ip =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
        OIFS=$IFS
        IFS='.'
        ip=($ip)
        IFS=$OIFS
        [[ ${ip[0]} -le 255 && ${ip[1]} -le 255 \
            && ${ip[2]} -le 255 && ${ip[3]} -le 255 ]]
        stat=$?
    fi
    return $stat
}

mask_to_prefix () {
  case "$1" in 
    "255.255.255.255") echo "32";;
    "255.255.255.254") echo "31";;
    "255.255.255.252") echo "30";;
    "255.255.255.248") echo "29";;
    "255.255.255.240") echo "28";;
    "255.255.255.224") echo "27";;
    "255.255.255.192") echo "26";;
    "255.255.255.128") echo "25";;
    "255.255.255.0")   echo "24";;
    "255.255.254.0")   echo "23";;
    "255.255.252.0")   echo "22";;
    "255.255.248.0")   echo "21";;
    "255.255.240.0")   echo "20";;
    "255.255.224.0")   echo "19";;
    "255.255.192.0")   echo "18";;
    "255.255.128.0")   echo "17";;
    "255.255.0.0")     echo "16";;
    "255.254.0.0")     echo "15";;
    "255.252.0.0")     echo "14";;
    "255.248.0.0")     echo "13";;
    "255.240.0.0")     echo "12";;
    "255.224.0.0")     echo "11";;
    "255.192.0.0")     echo "10";;
    "255.128.0.0")     echo "9";;
    "255.0.0.0")       echo "8";;
    "254.0.0.0")       echo "7";;
    "252.0.0.0")       echo "6";;
    "248.0.0.0")       echo "5";;
    "240.0.0.0")       echo "4";;
    "224.0.0.0")       echo "3";;
    "192.0.0.0")       echo "2";;
    "128.0.0.0")       echo "1";;
    "0.0.0.0")       echo "0";;
    *) echo "32";;
  esac
}

prefix_to_mask () {
  case "$1" in 
    "32") echo "255.255.255.255";;
    "31") echo "255.255.255.254";;
    "30") echo "255.255.255.252";;
    "29") echo "255.255.255.248";;
    "28") echo "255.255.255.240";;
    "27") echo "255.255.255.224";;
    "26") echo "255.255.255.192";;
    "25") echo "255.255.255.128";;
    "24") echo "255.255.255.0";;
    "23") echo "255.255.254.0";;
    "22") echo "255.255.252.0";;
    "21") echo "255.255.248.0";;
    "20") echo "255.255.240.0";;
    "19") echo "255.255.224.0";;
    "18") echo "255.255.192.0";;
    "17") echo "255.255.128.0";;
    "16") echo "255.255.0.0";;
    "15") echo "255.254.0.0";;
    "14") echo "255.252.0.0";;
    "13") echo "255.248.0.0";;
    "12") echo "255.240.0.0";;
    "11") echo "255.224.0.0";;
    "10") echo "255.192.0.0";;
    "9") echo "255.128.0.0";;
    "8") echo "255.0.0.0";;
    "7") echo "254.0.0.0";;
    "6") echo "252.0.0.0";;
    "5") echo "248.0.0.0";;
    "4") echo "240.0.0.0";;
    "3") echo "224.0.0.0";;
    "2") echo "192.0.0.0";;
    "1") echo "128.0.0.0";;
    "0") echo "0.0.0.0";;
    *) echo "255.255.255.255";;
  esac
}


installolsrd () {
    #mips or mipsel?
    [ $(echo -n I | od -to2 | awk '{ print substr($2,6,1); exit}') == 0 ] && arch='mips' || arch='mipsel'
    #version of install files?
    version_latest_ondisk=$(ls /config/user-data/olsrd_*_${arch}.deb 2>/dev/null | cut -d_ -f2 | sort -r | head -1)
    if [ -n ${version_latest_ondisk} ]; then
        ver=${version_latest_ondisk}
        olsrdpkg="${cfgusrdir}olsrd_${ver}_${arch}.deb"
        olsrdplgpkg="${cfgusrdir}olsrd-plugins_${ver}_${arch}.deb"
    fi
    if [ -n ${ver} ] && [ -f ${cfgusrdir}olsrd_${ver}_${arch}.deb ] && [ -f ${cfgusrdir}olsrd-plugins_${ver}_${arch}.deb ]; then
        # fix the pid-file to match the process id running in order to mark init.d#restart work properly
        running=$(ps aux | grep olsrd4 | grep -v grep | awk '{print $2'}) 2>/dev/null
        if [ "$running" ]; then
          pidfile=$(cat /var/run/olsrd.pid 2>/dev/null)
          if [ "$pidfile" ]; then
            if [ $running -eq $pidfile ]; then
              echo "Compared PIDs from process ("$running") and pid-file ("$pidfile"): all is fine" >>$log
            else
              echo "PID from process ("$running") not matching pid-file ("$pidfile")!" >>$log
              echo "Killing process..." >>$log
              kill $running
              echo "Removing pidfile..." >>$log
              rm -f /var/run/olsrd.pid >>$log 2>>$log
              echo "Starting process..." >>$log
              $olsrd4init start
              echo "PID done..." >>$log
            fi
          else
            echo "No PID for process ("$running") found!" >>$log
            echo "Killing process..." >>$log
            kill $running
            echo "Starting process..." >>$log
            $olsrd4init start
            echo "PID done..." >>$log
          fi
        else
          echo "PID-Check: no process running." >>$log
          [ -f /var/run/olsrd.pid ] && echo Removing PID-file >>$log && rm /var/run/olsrd.pid >>$log 2>>$log
        fi
        #
        #install using force-overwrite
        dpkg -i ${olsrdpkg}  ${olsrdplgpkg} >>$log 2>>$log
        statusolsrd=$?
        if [[ $statusolsrd == 0 ]]; then
            echo "success: packages olsrd and olsrd-plugins installed correctly. done." >>$log
            return 0
        else
            echo "error: problem installing olsrd or olsrd-plugins." >>$log
            return 1
        fi
    else
        echo "error on install(): no olsrd package found in /config/user-data." >>$log
        return 1
    fi
}

setupv4olsrd () {
    #on first install, on migration: create config dir and file
    [ -d $olsrddir ] || mkdir $olsrddir
    [ -f $olsrd4conf ] || cp /etc/olsrd/olsrd.conf $olsrd4conf
    if [ -f $olsrd4def ]; then
        #on update: restore olsrd-default (for START_OLSRD and DAEMON_OPT)
        cp $olsrd4def $olsrd4default
    else
        #on first install, on migration: add config-file to olsrd-default and save it in config dir
        olsrd4cnfesc=$(echo $olsrd4conf | sed -e 's/[\/&]/\\&/g')
        sed -i '/DAEMON_OPTS/'"s/\".*/\"-d \$DEBUGLEVEL -f $olsrd4cnfesc\"/" $olsrd4default
        cp $olsrd4default $olsrd4def
    fi
    #on migration
    #migrate settings from former olsrd4.conf and olsrd4.default (this will happen only once)
    [ -f /config/user-data/olsrd.default ] && conffile=$(awk -F"-f " '/DAEMON_OPTS/{print $2}' /config/user-data/olsrd.default | tr -d \") || conffile=""
    if [ "$conffile" ]; then
        # basics
        basics=$(sed -e 's/[ \t]*#.*$//' -e '/^[ ]*$/d' -e '/^.*{/I,/}/d' $conffile | grep -iE "MainIp|RtProto|RtTable|RtTableDefault|RtTableTunnel|RtTablePriority|RtTableDefaultOlsrPriority|RtTableTunnelPriority|RtTableDefaultPriority" | sed '$!s/$/\\/')
        [ "$basics" ] && sed -e '/^[ \t]*ipversion.*/Ia\' -e "$basics" $olsrd4conf
        # active interfaces in -i section
        settings=$(sed -e 's/[ \t]*#.*$//' -e '/^[ ]*$/d' $conffile | sed -n '/^[ \t]*interfacedefaults/I,/}/p')
        mode=$(echo "$settings" | grep -i mode | awk '{print $2}' | tr -d '"')
        autodetectchanges=$(echo "$settings" | grep -i AutoDetectChanges | awk '{print $2}' | tr -d '"')
        defaultLQ=$(echo "$settings" | grep -iE "LinkQualityMult .*default" | awk '{print $3}' | tr -d '"')
        weight=$(echo "$settings" | grep -i weight | awk '{print $2}' | tr -d '"')
        #interface-defaults
        [ "$weight" ] && echo Weight: $weight >>$log && sed -i '/^[ \t]*interfacedefaults/I,/}/ { s/^[ \t]*weight[ \t]\+[0-9]\+.*$/Weight '$weight'/Ig }' $olsrd4conf
        for int in $(grep -E 'MESH_IF.*=.*"' /config/user-data/olsrd.default | awk -F'=' '{print $2}' | tr -d '"'); do
          echo "## $int ##"
          [ "$mode" ] && echo Mode: $mode >>$log && new1='    Mode "'$mode'"\n' || new1=""
          [ "$autodetectchanges" ] && echo autodetectchanges: $autodetectchanges >>$log && new2='    AutoDetectChanges '$autodetectchanges'\n' || new2=""
          [ "$defaultLQ" ] && echo LinkQualityMult-Default: $defaultLQ >>$log && new3='    LinkQualityMult default '$defaultLQ'\n' || new3=""
          sed -i '/#interfacesection-end/'"s/#interfacesection-end/Interface \"$int\" {\n$new1$new2$new3}\n#interfacesection-end/" $olsrd4conf
        done
        #
        # active interfaces and its settings from olsrd4.conf
        for int in $(sed -e 's/[ \t]*#.*$//' -e '/^[ ]*$/d' $conffile | grep -iw interface); do
          int=$(echo $int | tr -d '"' | tr '[:upper:]' '[:lower:]')
          [[ "$int" =~ 'nterface' ]] && continue
          [[ "$int" =~ '{' ]] && continue
          settings=$(sed -e 's/[ \t]*#.*$//' -e '/^[ ]*$/d' $conffile | sed -n '/^[ \t]*interface .*'$int'.*$/I,/}/p')
          mode=$(echo "$settings" | grep -i mode | awk '{print $2}' | tr -d '"')
          autodetectchanges=$(echo "$settings" | grep -i AutoDetectChanges | awk '{print $2}' | tr -d '"')
          defaultLQ=$(echo "$settings" | grep -iE "LinkQualityMult .*default" | awk '{print $3}' | tr -d '"')
          weight=$(echo "$settings" | grep -i weight | awk '{print $2}' | tr -d '"')
          echo "## $int ##" >>$log
          [ "$mode" ] && echo Mode: $mode >>$log && new1='    Mode "'$mode'"\n' || new1=""
          [ "$autodetectchanges" ] && echo autodetectchanges: $autodetectchanges >>$log && new2='    AutoDetectChanges '$autodetectchanges'\n' || new2=""
          [ "$defaultLQ" ] && echo LinkQualityMult-Default: $defaultLQ >>$log && new3='    LinkQualityMult default '$defaultLQ'\n' || new3=""
          [ "$weight" ] && echo Weight: $weight >>$log && new4='    Weight '$weight'\n' || new4=""
          sed -i '/#interfacesection-end/'"s/#interfacesection-end/Interface \"$int\" {\n$new1$new2$new3$new4}\n#interfacesection-end/" $olsrd4conf
        done
        #
        # LQs and HNAs
        customLQ=$(sed -e 's/[ \t]*#.*$//' -e '/^[ ]*$/d' $conffile | grep -i linkqualitymult | grep -vi default | sed -e 's/$/\\/g')
        [ "$customLQ" ] && echo -e "## customLQ ##\n$customLQ" >>$log
        [ "$customLQ" ] && sed -i "/InterfaceDefaults/,/^}/s/^}/$customLQ \n}/g" $olsrd4conf
        hna4=$(sed -e 's/[ \t]*#.*$//' -e '/^[ ]*$/d' $conffile | sed -n '/^[ \t]*hna4/I,/}/p' | grep -E "([0-9]{1,3}\.){3}[0-9]{1,3}" | sed -e 's/$/\\/g')
        [ "$hna4" ] && echo -e "## hna4 ##\n$hna4" >>$log
        [ "$hna4" ] && sed -i "/Hna4/,/^}/s/^}/$hna4 \n}/g" $olsrd4conf
        #
        #enabled on boot
        startonboot=$(sed -e 's/[ \t]*#.*$//' -e '/^[ ]*$/d' /config/user-data/olsrd.default 2>/dev/null | grep -icE "START_OLSRD[ \t]*=[ \"\t]*YES")
        [ "$startonboot" -eq 1 ] && echo "## start-on-boot ##" >>$log
        if [ "$startonboot" -eq 1 ]; then
            sed -i 's/.*START_OLSRD.*/START_OLSRD="YES"/' $olsrd4default
            sed -i 's/.*START_OLSRD.*/START_OLSRD="YES"/' $olsrd4def
        else
            sed -i 's/.*START_OLSRD.*/#START_OLSRD="YES"/' $olsrd4default
            sed -i 's/.*START_OLSRD.*/#START_OLSRD="YES"/' $olsrd4def
        fi
        #
        #plugins and pluginparameters
        plugins=$(sed -e 's/[ \t]*#.*$//' -e '/^[ ]*$/d' /config/user-data/olsrd4.conf | grep -iw loadplugin | awk '{print $2}' | cut -d '.' -f1 | tr -d '"')
        if [ "$plugins" ]; then
          for plugin in $plugins; do
            file=$(ls -1 /usr/lib/olsrd/$plugin* 2>>/dev/null | tail -1 | cut -d '/' -f5)
            [ "$file" ] || (echo "Plugin $plugin not found in /usr/lib/olsrd" >>$log; continue)
            echo "## $plugin ## Filename $file" >>$log
            sed -e 's/[ \t]*#.*$//' -e '/^[ ]*$/d' /config/user-data/olsrd4.conf 2>>$log | sed -n '/^[ \t]*loadplugin[ \"\t]*'$plugin'/I,/}/p' 2>>$log | grep -i plparam 2>>$log | awk '{gsub("\"","",$0); print "  "$2"="$3}' >>$log 2>>$log
            #first delete pluginblock, then append old block with current files
            sed -i '/^[# \t]*loadplugin[ \t]\+"'$plugin'/I,/}/ d' $olsrd4conf 2>>$log
            sed -n '/^[ \t]*loadplugin[ \"\t]*'$plugin'/I,/}/ p' /config/user-data/olsrd4.conf 2>>$log | sed -e 's/loadplugin[ \t"a-zA-Z0-9._]*//Ig' -e '/^$/d' -e 's/.*{/\nLoadPlugin "'$file'"\n{/' >>$olsrd4conf 2>>$log
          done
        fi
        #
        #migration done, now avoid to do that again
        #move old files to .bak
        mv /config/user-data/olsrd.default /config/user-data/olsrd.default.bak
        mv $conffile /config/user-data/olsrd4.bak
    fi
    #trim tailing blanks/tabs
    sed -i 's/[ \t]*$//' $olsrd4conf
}

# function to copy olsrd(ipv4) instance for second(ipv6) instance and reset config to defaults
# because olsrd runs only in ipv4 *OR* ipv6 mode
# (olsrd2 is able to run v4 and v6 in one instance)
setupv6olsrd () {
    #on first install, on migration: create config dir and file
    [ -d $olsrddir ] || mkdir $olsrddir
    [ -f $olsrd6conf ] || cp /etc/olsrd/olsrd6.conf $olsrd6conf
    if [ -f $olsrd6def ]; then
        #on update: restore olsrd-default (for START_OLSRD and DAEMON_OPT)
        cp $olsrd6def $olsrd6default
    else
        #on first install, on migration: add config-file to olsrd-default and save it in config dir
        olsrd6cnfesc=$(echo $olsrd6conf | sed -e 's/[\/&]/\\&/g')
        sed -i '/DAEMON_OPTS/'"s/\".*/\"-d \$DEBUGLEVEL -f $olsrd6cnfesc\"/" $olsrd6default
        cp $olsrd6default $olsrd6def
    fi
    
    #on migration
    #migrate settings from former olsrd6.conf and olsrd6.default (this will happen only once)
    [ -f /config/user-data/olsrd6.default ] && conffile=$(awk -F"-f " '/DAEMON_OPTS/{print $2}' /config/user-data/olsrd6.default | tr -d \") || conffile=""
    if [ "$conffile" ]; then
        # basics
        basics=$(sed -e 's/[ \t]*#.*$//' -e '/^[ ]*$/d' -e '/^.*{/I,/}/d' $conffile | grep -iE "MainIp|RtProto|RtTable|RtTableDefault|RtTableTunnel|RtTablePriority|RtTableDefaultOlsrPriority|RtTableTunnelPriority|RtTableDefaultPriority" | sed '$!s/$/\\/')
        [ "$basics" ] && sed -e '/^[ \t]*ipversion.*/Ia\' -e "$basics" $olsrd6conf
        # active interfaces in -i section
        settings=$(sed -e 's/[ \t]*#.*$//' -e '/^[ ]*$/d' $conffile | sed -n '/^[ \t]*interfacedefaults/I,/}/p')
        mode=$(echo "$settings" | grep -i mode | awk '{print $2}' | tr -d '"')
        autodetectchanges=$(echo "$settings" | grep -i AutoDetectChanges | awk '{print $2}' | tr -d '"')
        defaultLQ=$(echo "$settings" | grep -iE "LinkQualityMult .*default" | awk '{print $3}' | tr -d '"')
        weight=$(echo "$settings" | grep -i weight | awk '{print $2}' | tr -d '"')
        #interface-defaults
        [ "$weight" ] && echo Weight: $weight >>$log && sed -i '/^[ \t]*interfacedefaults/I,/}/ { s/^[ \t]*weight[ \t]\+[0-9]\+.*$/Weight '$weight'/Ig }' $olsrd6conf
        for int in $(grep -E 'MESH_IF.*=.*"' /config/user-data/olsrd6.default | awk -F'=' '{print $2}' | tr -d '"'); do
          echo "## $int ##"
          [ "$mode" ] && echo Mode: $mode >>$log && new1='    Mode "'$mode'"\n' || new1=""
          [ "$autodetectchanges" ] && echo autodetectchanges: $autodetectchanges >>$log && new2='    AutoDetectChanges '$autodetectchanges'\n' || new2=""
          [ "$defaultLQ" ] && echo LinkQualityMult-Default: $defaultLQ >>$log && new3='    LinkQualityMult default '$defaultLQ'\n' || new3=""
          sed -i '/#interfacesection-end/'"s/#interfacesection-end/Interface \"$int\" {\n$new1$new2$new3}\n#interfacesection-end/" $olsrd6conf
        done
        #
        # active interfaces and its settings from olsrd6.conf
        for int in $(sed -e 's/[ \t]*#.*$//' -e '/^[ ]*$/d' $conffile | grep -iw interface); do
          int=$(echo $int | tr -d '"' | tr '[:upper:]' '[:lower:]')
          [[ "$int" =~ 'nterface' ]] && continue
          [[ "$int" =~ '{' ]] && continue
          settings=$(sed -e 's/[ \t]*#.*$//' -e '/^[ ]*$/d' $conffile | sed -n '/^[ \t]*interface .*'$int'.*$/I,/}/p')
          mode=$(echo "$settings" | grep -i mode | awk '{print $2}' | tr -d '"')
          autodetectchanges=$(echo "$settings" | grep -i AutoDetectChanges | awk '{print $2}' | tr -d '"')
          defaultLQ=$(echo "$settings" | grep -iE "LinkQualityMult .*default" | awk '{print $3}' | tr -d '"')
          weight=$(echo "$settings" | grep -i weight | awk '{print $2}' | tr -d '"')
          echo "## $int ##" >>$log
          [ "$mode" ] && echo Mode: $mode >>$log && new1='    Mode "'$mode'"\n' || new1=""
          [ "$autodetectchanges" ] && echo autodetectchanges: $autodetectchanges >>$log && new2='    AutoDetectChanges '$autodetectchanges'\n' || new2=""
          [ "$defaultLQ" ] && echo LinkQualityMult-Default: $defaultLQ >>$log && new3='    LinkQualityMult default '$defaultLQ'\n' || new3=""
          [ "$weight" ] && echo Weight: $weight >>$log && new4='    Weight '$weight'\n' || new4=""
          sed -i '/#interfacesection-end/'"s/#interfacesection-end/Interface \"$int\" {\n$new1$new2$new3$new4}\n#interfacesection-end/" $olsrd6conf
        done
        #
        # LQs and HNAs
        customLQ=$(sed -e 's/[ \t]*#.*$//' -e '/^[ ]*$/d' $conffile | grep -i linkqualitymult | grep -vi default | sed -e 's/$/\\/g')
        [ "$customLQ" ] && echo -e "## customLQ ##\n$customLQ" >>$log
        [ "$customLQ" ] && sed -i "/InterfaceDefaults/,/^}/s/^}/$customLQ \n}/g" $olsrd6conf
        hna6=$(sed -e 's/[ \t]*#.*$//' -e '/^[ ]*$/d' $conffile | sed -n '/^[ \t]*hna6/I,/}/p' | grep -E ":" | sed -e 's/$/\\/g')
        [ "$hna6" ] && echo -e "## hna6 ##\n$hna6" >>$log
        [ "$hna6" ] && sed -i "/hna6/,/^}/s/^}/$hna6 \n}/g" $olsrd6conf
        #
        #enabled on boot
        startonboot=$(sed -e 's/[ \t]*#.*$//' -e '/^[ ]*$/d' /config/user-data/olsrd6.default 2>/dev/null | grep -icE "START_OLSRD[ \t]*=[ \"\t]*YES")
        [ "$startonboot" -eq 1 ] && echo "## start-on-boot ##" >>$log
        if [ "$startonboot" -eq 1 ]; then
            sed -i 's/.*START_OLSRD.*/START_OLSRD="YES"/' $olsrd6default
            sed -i 's/.*START_OLSRD.*/START_OLSRD="YES"/' $olsrd6def
        else
            sed -i 's/.*START_OLSRD.*/#START_OLSRD="YES"/' $olsrd6default
            sed -i 's/.*START_OLSRD.*/#START_OLSRD="YES"/' $olsrd6def
        fi
        #
        #plugins and pluginparameters
        plugins=$(sed -e 's/[ \t]*#.*$//' -e '/^[ ]*$/d' /config/user-data/olsrd6.conf | grep -iw loadplugin | awk '{print $2}' | cut -d '.' -f1 | tr -d '"')
        if [ "$plugins" ]; then
          for plugin in $plugins; do
            file=$(ls -1 /usr/lib/olsrd/$plugin* 2>>/dev/null | tail -1 | cut -d '/' -f5)
            [ "$file" ] || (echo "Plugin $plugin not found in /usr/lib/olsrd" >>$log; continue)
            echo "## $plugin ## Filename $file" >>$log
            sed -e 's/[ \t]*#.*$//' -e '/^[ ]*$/d' /config/user-data/olsrd6.conf 2>>$log | sed -n '/^[ \t]*loadplugin[ \"\t]*'$plugin'/I,/}/p' 2>>$log | grep -i plparam 2>>$log | awk '{gsub("\"","",$0); print "  "$2"="$3}' >>$log 2>>$log
            #first delete pluginblock, then append old block with current files
            sed -i '/^[# \t]*loadplugin[ \t]\+"'$plugin'/I,/}/ d' $olsrd6conf 2>>$log
            sed -n '/^[ \t]*loadplugin[ \"\t]*'$plugin'/I,/}/ p' /config/user-data/olsrd6.conf 2>>$log | sed -e 's/loadplugin[ \t"a-zA-Z0-9._]*//Ig' -e '/^$/d' -e 's/.*{/\nLoadPlugin "'$file'"\n{/' >>$olsrd6conf 2>>$log
          done
        fi
        #
        #migration done, now avoid to do that again
        #move old files to .bak
        mv /config/user-data/olsrd6.default /config/user-data/olsrd6.default.bak
        mv $conffile /config/user-data/olsrd6.bak
    fi
    #trim tailing blanks/tabs
    sed -i 's/[ \t]*$//' $olsrd6conf
}

# function called when you click the wizard
load () {
    # rename custom-named wizard to "OLSRd_V1"?
    # issue: after renaming wizard-dir, wizard still has wrong name in webif until relogin ...
    #mv $(dirname $0) $(dirname $0 | rev | cut -d"/" -f2- | rev)/OLSRd_V1

    # try to install olsrd and show status (with version information if installed)
    olsrdpkgstatus="\"pkgstatus\":\"error: not installed.\""
    dpkg -l olsrd olsrd-plugins >>$log 2>>$log
    if [[ $? != 0 ]]; then
        echo "olsrd packages not installed! need to install packages." >>$log
        installolsrd >>$log 2>>$log
        if [[ $? == 0 ]]; then
            setupv4olsrd >>$log 2>>$log
            setupv6olsrd >>$log 2>>$log
            echo "olsrd packages installed and configured. all done." >>$log
            olsrdpkgstatus="\"pkgstatus\":\"success: running olsrd installation ... completed.\""
        else
            olsrdpkgstatus="\"pkgstatus\":\"error: not installed, download or install problem. check $log\""
        fi
    else
        echo "olsrd packages already installed! checking for new version on disk $(date +%Y-%m-%d/%H:%M:%S.%N)..." >>$log
        # check if latest version is installed from packages available in $cfgusrdir
        version_installed=$(dpkg -l olsrd | awk '/ii/ { print $3 }')
        version_latest_ondisk=$(ls /config/user-data/olsrd_* | cut -d_ -f2 | sort -r | head -1)
        ## each separate version number must be less than 3 digit wide for this function!
        function version { echo "$@" | awk -F. '{ printf("%03d%03d%03d\n", $1,$2,$3); }'; }
        if [ "$(version "${version_latest_ondisk:0:5}")" -gt "$(version "${version_installed:0:5}")" ]; then
            echo "new olsrd packages found, trying to install packages." >>$log
            installolsrd >>$log 2>>$log
            if [[ $? == 0 ]]; then
                setupv4olsrd >>$log 2>>$log
                setupv6olsrd >>$log 2>>$log
                echo "olsrd packages installed and configured. done." >>$log
            fi
        else
            echo "latest available olsrd packages are already installed. (found in $cfgusrdir)" >>$log
        fi
        olsrdver=$(dpkg -l olsrd | awk '/ii/ { print $3 }')
        olsrdplgver=$(dpkg -l olsrd-plugins | awk '/ii/ { print $3 }')
        echo "latest available olsrd installed and configured. all done. $(date +%Y-%m-%d/%H:%M:%S.%N)" >>$log
        olsrdpkgstatus="\"pkgstatus\":\"success: packages olsrd $olsrdver and olsrd-plugins $olsrdplgver installed.\""
    fi

    #
    # get network status of daemon(s) if running
    #
    v4netstatus=$(netstat -4aunp | grep -iv olsrd2 | awk '/olsrd/ { print $4" "$6;exit }')
    if [ -z "$v4netstatus" ]; then
        v4netstatus=$(ps aux | grep -vE "olsrd2|awk" | awk '/olsrd/ {print $13}' | head -n1)
        if [ "$v4netstatus" ]; then
            v4netstatus="running/"$v4netstatus" inactive"
        else
            v4netstatus="not running"
        fi
    fi
    v6netstatus=$(netstat -6aunp | grep -iv olsrd2 | awk '/olsrd/ { print $4" "$6;exit }')
    if [ -z "$v6netstatus" ]; then v6netstatus="not running"; fi
    olsrddaemonstatus="\"daemonstatus\":\"IPv4: ${v4netstatus//\//-}. IPv6: ${v6netstatus//\//-}.\""

    # post-config script in case of firmware upgrade
    olsrdsetupscript='"olsrdsetupscript":""'
    if [[ -w $olsrdsetupscriptfile ]]; then
        olsrdsetupscript='"olsrdsetupscript":"on"'
    fi

    ###############################
    #  IPv4 OLSRd LOAD function   #
    ###############################
    # get current olsrd4 configuration and return configured values to wizard.html
    [[ -w $olsrd4default && $(grep START_OLSRD $olsrd4default) != \#* ]] && olsrd4enabled='"olsrd4enabled":"on",' || olsrd4enabled='"olsrd4enabled":"",'

    defrunlvl=$(grep initdefault /etc/inittab | cut -d: -f2)
    [[ $(ls /etc/rc$defrunlvl.d/S*olsrd 2>/dev/null) ]] && olsrd4runonboot='"olsrd4runonboot":"on",' || olsrd4runonboot='"olsrd4runonboot":"",'

    # get all running ethernet interfaces in format eth0;192.168.1.1/24
    olsrd4meshif=$(awk -F" " '/^Interface.*\{/ {print $2}' $olsrd4conf | tr -d \")
    olsrd4interfaces=''
    v4interfacelist=$(ip -f inet addr | awk '/^[0-9]:*|inet/ { print $2 }' | sed ':a;N;$!ba;s/:\n/;/g' | grep ";")
    for v4if in $v4interfacelist; do
        v4ifinterface=$(echo $v4if | cut -d";" -f1)
        v4ifaddress=$(echo $v4if | cut -d";" -f2)
        # remove trailing @interfacename if occurred (eg. when defining vlans)
        v4ifinterface=$(echo ${v4ifinterface} | cut -d@ -f1)
        # skip loopback and physical switch interfaces
        [[ "${v4ifinterface}" == "lo" ]] && continue
        [[ "${v4ifinterface}" == "switch0" ]] && continue
        intfstatus=''
        for mintf in $olsrd4meshif; do
            [[ "$mintf" == "${v4ifinterface}" ]] && intfstatus='"enabled":"on",' && break
        done
        settings=$(sed -e 's/[ \t]*#.*$//' -e '/^[ ]*$/d' $olsrd4conf | sed -n '/^[ \t]*interface .*'$v4ifinterface'.*$/I,/}/p')
        mode=$(echo "$settings" | grep -i mode | awk '{print $2}' | tr -d '"')
        autodetectchanges=$(echo "$settings" | grep -i AutoDetectChanges | awk '{print $2}' | tr -d '"')
        defaultLQ=$(echo "$settings" | grep -iE "LinkQualityMult .*default" | awk '{print $3}' | tr -d '"')
        [ "$mode" ] && (echo "$mode" | grep -iqE "mesh|silent|ether") && mode='"meshmode":"'$mode'",' || mode=''
        [ "$autodetectchanges" ] && autodetectchanges='"autochanges":"'$autodetectchanges'",' || autodetectchanges=''
        [ "$defaultLQ" ] && defaultLQ='"lqdefault":"'$defaultLQ'",' || defaultLQ=''
        olsrd4interfaces=$olsrd4interfaces'{'$intfstatus$mode$autodetectchanges$defaultLQ'"olsrd4interface":"'${v4ifinterface}'","ipv4address":"'${v4ifaddress}'"},'
    done
    olsrd4interfaces=${olsrd4interfaces%","}

    #txtinfo4 plugin
    [[ $(grep LoadPlugin.*olsrd_txtinfo $olsrd4conf) != \#* ]] && olsrd4plgtxtinfo='"olsrd4plgtxtinfo":"on",' || olsrd4plgtxtinfo='"olsrd4plgtxtinfo":"",'
    settings=$(sed -e 's/[ \t]*#.*$//' -e '/^[ ]*$/d' $olsrd4conf | sed -n '/^[ \t]*loadplugin[ \"\t]*olsrd_txtinfo/I,/}/p' | grep -i plparam | awk '{gsub("\"","",$0); print $2"="$3}')
    [ ! "$settings" ] && $(sed -n '/^[ \t]*loadplugin[ \"\t]*olsrd_txtinfo/I,/}/p' $olsrd4conf | grep -i plparam | awk '{gsub("\"","",$0); print $2"="$3}' | cut -d"#" -f1)
    for line in $settings; do
      param=$(echo $line | cut -d= -f1)
      value=$(echo $line | cut -d= -f2)
      (echo $line | grep -iq "port=") && [ ! "$txtplg4port" ] && txtplg4port=$(echo $line | cut -d= -f2) && continue
      if (echo $line | grep -iq "accept=") && [ ! "$txtplg4who" ]; then
        case $(echo $line | cut -d= -f2) in
          "0.0.0.0") txtplg4who="any";;
          "127.0.0.1") txtplg4who="localhost";;
          *) txtplg4who="custom"; txtplg4custom=$(echo $line | cut -d= -f2);;
        esac
      fi
    done
    [ "$txtplg4port" ] || txtplg4port="2006"
    [ "$txtplg4who" ] || txtplg4who="localhost"
    txt4='"txtplg4port":"'$txtplg4port'","txtplg4who":"'$txtplg4who'","txtplg4custom":"'$txtplg4custom'",'

    #jsoninfo4 plugin
    [[ $(grep LoadPlugin.*olsrd_jsoninfo $olsrd4conf) != \#* ]] && olsrd4plgjsoninfo='"olsrd4plgjsoninfo":"on",' || olsrd4plgjsoninfo='"olsrd4plgjsoninfo":"",'
    settings=$(sed -e 's/[ \t]*#.*$//' -e '/^[ ]*$/d' $olsrd4conf | sed -n '/^[ \t]*loadplugin[ \"\t]*olsrd_jsoninfo/I,/}/p' | grep -i plparam | awk '{gsub("\"","",$0); print $2"="$3}')
    [ ! "$settings" ] && $(sed -n '/^[ \t]*loadplugin[ \"\t]*olsrd_jsoninfo/I,/}/p' $olsrd4conf | grep -i plparam | awk '{gsub("\"","",$0); print $2"="$3}' | cut -d"#" -f1)
    for line in $settings; do
      param=$(echo $line | cut -d= -f1)
      value=$(echo $line | cut -d= -f2)
      (echo $line | grep -iq "port=") && [ ! "$jsonplg4port" ] && jsonplg4port=$(echo $line | cut -d= -f2) && continue
      if (echo $line | grep -iq "accept=") && [ ! "$jsonplg4who" ]; then
        case $(echo $line | cut -d= -f2) in
          "0.0.0.0") jsonplg4who="any";;
          "127.0.0.1") jsonplg4who="localhost";;
          *) jsonplg4who="custom"; jsonplg4custom=$(echo $line | cut -d= -f2);;
        esac
      fi
    done
    [ "$jsonplg4port" ] || jsonplg4port="9090"
    [ "$jsonplg4who" ] || jsonplg4who="localhost"
    json4='"jsonplg4port":"'$jsonplg4port'","jsonplg4who":"'$jsonplg4who'","jsonplg4custom":"'$jsonplg4custom'",'
    
    
    #httpinfo4 plugin
    [[ $(grep LoadPlugin.*olsrd_httpinfo $olsrd4conf) != \#* ]] && olsrd4plghttpinfo='"olsrd4plghttpinfo":"on",' || olsrd4plghttpinfo='"olsrd4plghttpinfo":"",'
    settings=$(sed -e 's/[ \t]*#.*$//' -e '/^[ ]*$/d' $olsrd4conf | sed -n '/^[ \t]*loadplugin[ \"\t]*olsrd_httpinfo/I,/}/p' | grep -i plparam | awk '{gsub("\"","",$0); print $2"="$3"="$4}')
    [ "$settings" ] || settings=$(sed -n '/^[# \t]*loadplugin[ \"\t]*olsrd_httpinfo/I,/}/p' $olsrd4conf | grep -i plparam | grep -viE "#plparam.*0\.0\.0\.0.*0\.0\.0\.0|#plparam.*80\.23\.53\.22" | awk '{gsub("\"","",$0); print $3"="$4"="$5}')

    httpplg4port=$(echo "$settings" | grep -i "port=" | cut -d= -f2)
    [ "$httpplg4port" ] || httpplg4port="8080"

    if   (echo "$settings" | grep -iqE "net=0\.0\.0\.0=0\.0\.0\.0|host=0\.0\.0\.0"); then httpplg4who="any"
    elif [ $(echo "$settings" | grep -iEvc "127.0.0.1") -eq 0 ]; then httpplg4who="localhost"
    elif [ $(echo "$settings" | grep -iEc "host|net") -eq 0 ]; then httpplg4who="localhost"
    elif [ $(echo "$settings" | grep -iEc                         "net=10\.0\.0\.0=255\.0\.0\.0|net=78\.41\.112\.0=255\.255\.248\.0|net=193\.238\.156\.0=255\.255\.252\.0|net=185\.194\.20\.0=255\.255\.252\.0|host=127\.0\.0\.1") -eq 5 ] &&
         [ $(echo "$settings" | grep -iE  "host|net" | grep -iEcv "net=10\.0\.0\.0=255\.0\.0\.0|net=78\.41\.112\.0=255\.255\.248\.0|net=193\.238\.156\.0=255\.255\.252\.0|net=185\.194\.20\.0=255\.255\.252\.0|host=127\.0\.0\.1") -eq 0 ]; then 
            httpplg4who="funkfeuer"
    else
            httpplg4who="custom"
    fi
    if [ "$httpplg4who"=="funkfeuer" ] || [ "$httpplg4who"=="custom" ]; then
        for line in $(echo "$settings" | grep -iE "net=|host="); do
          param=$(echo $line | cut -d= -f1)
          value=$(echo $line | cut -d= -f2)
          if (echo $line | grep -iq "net="); then
            httpplg4list=$httpplg4list'{"httpplg4ip":"'$(echo $line | cut -d= -f2)'","httpplg4mask":"'$(mask_to_prefix $(echo $line | cut -d= -f3))'"},'
          else
            httpplg4list=$httpplg4list'{"httpplg4ip":"'$(echo $line | cut -d= -f2)'","httpplg4mask":"32"},'
          fi
        done
    elif [ "$httpplg4who"=="any" ]; then
        httpplg4list=$httpplg4list'{"httpplg4ip":"0.0.0.0","httpplg4mask":"0"},'
    else
        httpplg4list=$httpplg4list'{"httpplg4ip":"127.0.0.1","httpplg4mask":"32"},'
    fi
    httpplg4list=${httpplg4list%","}
    [ "$httpplg4who" ] || httpplg4who="localhost"
    http4='"httpplg4port":"'$httpplg4port'","httpplg4who":"'$httpplg4who'","httpplg4list":['$httpplg4list'],'

    olsrd4plgarprefresh='"olsrd4plgarprefresh":"",'
    if [[ $(grep LoadPlugin.*arprefresh $olsrd4conf) != \#* ]]; then
        olsrd4plgarprefresh='"olsrd4plgarprefresh":"on",'
    fi
    if [ $(grep -c LoadPlugin.*olsrd_watchdog $olsrd4conf) \> 0 ] && [[ $(grep LoadPlugin.*olsrd_watchdog $olsrd4conf) != \#* ]]; then
        olsrd4watchdog='"olsrd4watchdog":"on",'
    fi
    olsrd4plugins=$olsrd4plgtxtinfo$txt4$olsrd4plgjsoninfo$json4$olsrd4plghttpinfo$http4$olsrd4plgarprefresh$olsrd4watchdog

    hna4list=''
    for line in $(sed -e 's/[ \t]*#.*$//' -e '/^[ ]*$/d' $olsrd4conf | sed -n "/hna4/I,/^}/ p" | grep -E "([0-9]{1,3}\.){3}[0-9]{1,3}" | sed -e 's/ /-/g'); do
        ip=$(echo $line | cut -d "-" -f 1)
        mask=$(mask_to_prefix $(echo $line | cut -d "-" -f 2))
        hna4list=$hna4list'{"hna4address":"'$ip'","hna4mask":"'$mask'"},'
    done
    [ "$hna4list" ] && hna4list='"hna4list":['${hna4list%","}'],' || hna4list=''

    lq4list=''
    for line in $(sed -e 's/[ \t]*#.*$//' -e '/^[ ]*$/d' $olsrd4conf | grep -i linkqualitymult | grep -vi default |awk '{print $2"-"$3}'); do
        ip=$(echo $line | cut -d "-" -f 1)
        value=$(echo $line | cut -d "-" -f 2)
        lq4list=$lq4list'{"lq4address":"'$ip'","lq4value":"'$value'"},'
    done
    [ "$lq4list" ] && lq4list='"lq4list":['${lq4list%","}'],' || lq4list=''

    
    ###############################
    #  IPv6 OLSRd LOAD function   #
    ###############################
    # get current olsrd6 configuration and return configured values to wizard.html
    [[ -w $olsrd6default && $(grep START_OLSRD $olsrd6default) != \#* ]] && olsrd6enabled='"olsrd6enabled":"on",' || olsrd6enabled='"olsrd6enabled":"",'

    defrunlvl=$(grep initdefault /etc/inittab | cut -d: -f2)
    [[ $(ls /etc/rc$defrunlvl.d/S*olsrd6 2>/dev/null) ]] && olsrd6runonboot='"olsrd6runonboot":"on",' || olsrd6runonboot='"olsrd4runonboot":"",'

    # get all running ethernet interfaces in format eth0;192.168.1.1/24
    olsrd6meshif=$(awk -F" " '/^Interface.*\{/ {print $2}' $olsrd6conf | tr -d \")
    olsrd6interfaces=''
    v6interfacelist=$(ip -f inet6 addr | awk '/^[0-9]:*|inet6/ { print $2 }' | sed ':a;N;$!ba;s/:\n/;/g' | grep ";")
    for v6if in $v6interfacelist; do
        v6ifinterface=$(echo $v6if | cut -d";" -f1)
        v6ifaddress=$(echo $v6if | cut -d";" -f2)
        # remove trailing @interfacename if occurred (eg. when defining vlans)
        v6ifinterface=$(echo ${v6ifinterface} | cut -d@ -f1)
        # skip loopback and physical switch interfaces
        [[ "${v6ifinterface}" == "lo" ]] && continue
        [[ "${v6ifinterface}" == "switch0" ]] && continue
        [[ "${v6ifaddress}" == "fe80"* ]] && continue
        intfstatus=''
        for mintf in $olsrd6meshif; do
            [[ "$mintf" == "${v6ifinterface}" ]] && intfstatus='"enabled":"on",' && break
        done
        settings=$(sed -e 's/[ \t]*#.*$//' -e '/^[ ]*$/d' $olsrd6conf | sed -n '/^[ \t]*interface .*'$v6ifinterface'.*$/I,/}/p')
        mode=$(echo "$settings" | grep -i mode | awk '{print $2}' | tr -d '"')
        autodetectchanges=$(echo "$settings" | grep -i AutoDetectChanges | awk '{print $2}' | tr -d '"')
        defaultLQ=$(echo "$settings" | grep -iE "LinkQualityMult .*default" | awk '{print $3}' | tr -d '"')
        [ "$mode" ] && (echo "$mode" | grep -iqE "mesh|silent|ether") && mode='"meshmode":"'$mode'",' || mode=''
        [ "$autodetectchanges" ] && autodetectchanges='"autochanges":"'$autodetectchanges'",' || autodetectchanges=''
        [ "$defaultLQ" ] && defaultLQ='"lqdefault":"'$defaultLQ'",' || defaultLQ=''
        olsrd6interfaces=$olsrd6interfaces'{'$intfstatus$mode$autodetectchanges$defaultLQ'"olsrd6interface":"'${v6ifinterface}'","ipv6address":"'${v6ifaddress}'"},'
    done
    olsrd6interfaces=${olsrd6interfaces%","}
    olsrd6plugins=''
    olsrd6plgtxtinfo='"olsrd6plgtxtinfo":"",'
    if [[ $(grep LoadPlugin.*olsrd_txtinfo $olsrd6conf) != \#* ]]; then
        olsrd6plgtxtinfo='"olsrd6plgtxtinfo":"on",'
    fi
    olsrd6plgjsoninfo='"olsrd6plgjsoninfo":"",'
    if [[ $(grep LoadPlugin.*olsrd_jsoninfo $olsrd6conf) != \#* ]]; then
        olsrd6plgjsoninfo='"olsrd6plgjsoninfo":"on",'
    fi
    olsrd6plghttpinfo='"olsrd6plghttpinfo":"",'
    if [[ $(grep LoadPlugin.*olsrd_httpinfo $olsrd6conf) != \#* ]]; then
        olsrd6plghttpinfo='"olsrd6plghttpinfo":"on",'
    fi
    if [ $(grep -c LoadPlugin.*olsrd_watchdog $olsrd6conf) \> 0 ] && [[ $(grep LoadPlugin.*olsrd_watchdog $olsrd6conf) != \#* ]]; then
        olsrd6watchdog='"olsrd6watchdog":"on",'
    fi
    olsrd6plugins=$olsrd6plugins$olsrd6plgtxtinfo$olsrd6plgjsoninfo$olsrd6plghttpinfo$olsrd6watchdog

    hna6list=''
    for line in $(sed -e 's/[ \t]*#.*$//' -e '/^[ ]*$/d' $olsrd6conf | sed -n "/hna6/I,/^}/ p" | grep -E ":" | sed -e 's/ /-/g'); do
        ip=$(echo $line | cut -d "-" -f 1)
        mask=$(echo $line | cut -d "-" -f 2)
        hna6list=$hna6list'{"hna6address":"'$ip'","hna6mask":"'$mask'"},'
    done
    [ "$hna6list" ] && hna6list='"hna6list":['${hna6list%","}'],' || hna6list=''

    lq6list=''
    for line in $(sed -e 's/[ \t]*#.*$//' -e '/^[ ]*$/d' $olsrd6conf | grep -i linkqualitymult | grep -vi default |awk '{print $2"-"$3}'); do
        ip=$(echo $line | cut -d "-" -f 1)
        value=$(echo $line | cut -d "-" -f 2)
        lq6list=$lq6list'{"lq6address":"'$ip'","lq6value":"'$value'"},'
    done
    [ "$lq6list" ] && lq6list='"lq6list":['${lq6list%","}'],' || lq6list=''

    ###############################
    #  IPv6 OLSRd LOAD done       #
    ###############################


    # if one of enabled interfaces is a bridge, drop forwarded ethernet frames, else accept
    if [[ $olsrd4meshif == *"br"* ]] || [[ $olsrd6meshif == *"br"* ]]; then
        if [[ $(grep -E "^ebtables\ \-P\ FORWARD\ DROP" /config/scripts/pre-config.d/ebtables.sh 2>/dev/null | wc -l) == 0 ]]; then
            if [ ! -d /config/scripts/pre-config.d ]; then
                # create missing directory
                mkdir /config/scripts/pre-config.d >>$log 2>>$log
                chmod --reference=/config/scripts/post-config.d /config/scripts/pre-config.d >>$log 2>>$log
                chown --reference=/config/scripts/post-config.d /config/scripts/pre-config.d >>$log 2>>$log
            fi
            if [ ! -f /config/scripts/pre-config.d/ebtables.sh ]; then
                #create file
                echo -e '#!/bin/sh\n#olsrdwizard: dont forward ethernet frames between bridge ports\nebtables -P FORWARD DROP\nexit 0' > /config/scripts/pre-config.d/ebtables.sh
                chmod 755 /config/scripts/pre-config.d/ebtables.sh
            else
                #add lines to file on top
                linenumber=2
                sed -i $linenumber'i\
#olsrdwizard: dont forward ethernet frames between bridge ports\
ebtables -P FORWARD DROP' /config/scripts/pre-config.d/ebtables.sh >>$log 2>>$log
            fi
            ebtables -P FORWARD DROP
        fi
    else
        if [[ $(grep -E "^#olsrdwizard:|^ebtables\ \-P\ FORWARD\ DROP" /config/scripts/pre-config.d/ebtables.sh 2>/dev/null | wc -l) == 2 ]]; then
            sed -i '/^#olsrdwizard:.*/d' /config/scripts/pre-config.d/ebtables.sh
            sed -i '/^ebtables\ \-P\ FORWARD\ DROP/d' /config/scripts/pre-config.d/ebtables.sh
            ebtables -P FORWARD ACCEPT
        fi
    fi


    ####### wizard version check against github
    #
    olsrdwizard=""
    for i in $(find /config/wizard/feature/ -name wizard.html | grep -i olsr); do
        if [[ $(head $i -n 10 | grep 'OLSRd_V1') ]]; then
            olsrdwizard=$i
            break
        fi
    done
    if [ ! $olsrdwizard ]; then
        updatetext="error: OLSRd_V1 wizard.html not found!" >>$log 2>>$log
    else
        CURRENTVERSION=$(head -n 8 $olsrdwizard | grep -i versioninfo= | awk -F"=" {'print $2'})
        if [ $((onlinecheck)) = 0 ]; then
            GITVERSION=$(curl -sL --connect-timeout 2 --speed-time 2 -r 0-512 https://raw.githubusercontent.com/$gitowner/$gitrepo/$gitbranch/wizard.html | head -n 8 | grep -i versioninfo= | awk -F"=" {'print $2'})
            if [ "$GITVERSION" ] && [ "$CURRENTVERSION" ]; then 
                if [ $(($GITVERSION)) \> $(($CURRENTVERSION)) ]; then 
                    updatetext="new version available: "$GITVERSION", current: "$CURRENTVERSION >>$log 2>>$log
                else
                    updatetext="current version "$CURRENTVERSION" is up-to-date" >>$log 2>>$log
                fi
            else
                updatetext="version info not available. git:"$GITVERSION", current: "$CURRENTVERSION"." >>$log 2>>$log
            fi
        else
            updatetext="version info not available. git:OFFLINE, current: "$CURRENTVERSION"." >>$log 2>>$log
        fi
    fi
    updatestatus='"updatestatus":"'$updatetext'"'
    # end
    ####### wizard version check against github

    # check for autoupdate
    if [ -f /config/user-data/autoupdate.dat ] && [ "$(grep -i "wizard-olsrd_v1=yes" /config/user-data/autoupdate.dat | wc -l)" == "1" ]; then
        autoupdatefromgithub=',"autoupdatefromgithub":"on"'
    fi

    #get emission settings
    olsrdsettings='"olsrdsettings":[{'
    olsrdsettings=$olsrdsettings'"HelloInterval":"'$(awk '/HelloInterval/ {print $2}' $olsrd4conf)'"'
    olsrdsettings=$olsrdsettings',"HelloValidityTime":"'$(awk '/HelloValidityTime/ {print $2}' $olsrd4conf)'"'
    olsrdsettings=$olsrdsettings',"TcValidityTime":"'$(awk '/TcValidityTime/ {print $2}' $olsrd4conf)'"'
    olsrdsettings=$olsrdsettings',"TcInterval":"'$(awk '/TcInterval/ {print $2}' $olsrd4conf)'"'
    olsrdsettings=$olsrdsettings',"MidValidityTime":"'$(awk '/MidValidityTime/ {print $2}' $olsrd4conf)'"'
    olsrdsettings=$olsrdsettings',"MidInterval":"'$(awk '/MidInterval/ {print $2}' $olsrd4conf)'"'
    olsrdsettings=$olsrdsettings',"HnaValidityTime":"'$(awk '/HnaValidityTime/ {print $2}' $olsrd4conf)'"'
    olsrdsettings=$olsrdsettings',"HnaInterval":"'$(awk '/HnaInterval/ {print $2}' $olsrd4conf)'"'
    olsrdsettings=$olsrdsettings',"Pollrate":"'$(awk '/Pollrate/ {print $2}' $olsrd4conf)'"'
    olsrdsettings=$olsrdsettings',"olsrd4Ip4Broadcast":"'$(awk '/Ip4Broadcast/ { print $2 }' $olsrd4conf)'"'
    olsrdsettings=$olsrdsettings'}]'

    # get all variables together for output
    ipv4conf="$olsrd4enabled$olsrd4runonboot$olsrd4plugins$hna4list$lq4list\"olsrd4config\":[$olsrd4interfaces]"
    ipv6conf="$olsrd6enabled$olsrd6runonboot$olsrd6plugins$hna6list$lq6list\"olsrd6config\":[$olsrd6interfaces]"
    echo -n "{\"success\":\"1\",\"data\":{ $olsrdpkgstatus,$olsrddaemonstatus,$olsrdsetupscript,$updatestatus$autoupdatefromgithub,$ipv4conf,$ipv6conf,$olsrdsettings },"
    echo "\"definition\":{ \"meshmode\":{\"options\":[\"mesh\",\"ether\",\"silent\"]}, \"autochanges\":{\"options\":[\"yes\",\"no\"]} }}"
    
    [ -x /config/scripts/post-config.d/olsr-after-ntp.sh ] || write_ntp_script
}

# function called when you click apply
apply () {
    # setup script
    olsrdsetupscript=$(jq -M -r '.olsrdsetupscript' $INPUT 2>/dev/null)
    if [[ "$olsrdsetupscript" == "on" ]]; then
        if [[ ! -w $olsrdsetupscript ]]; then
            if [[ -w $olsrddir$(basename $olsrdsetupscriptfile) ]]; then
                cp -f $olsrddir$(basename $olsrdsetupscriptfile) $olsrdsetupscriptfile >/dev/null 2>/dev/null
                chmod +x $olsrdsetupscriptfile >/dev/null 2>/dev/null
                rm $olsrddir$(basename $olsrdsetupscriptfile) >/dev/null 2>/dev/null
            else
                writesetupscript
                cp -f /tmp/olsrdsetupscriptfile $olsrdsetupscriptfile >/dev/null 2>/dev/null
                chmod +x $olsrdsetupscriptfile >/dev/null 2>/dev/null
                rm /tmp/olsrdsetupscriptfile >/dev/null 2>/dev/null
            fi
        fi
    else
        if [[ -w $olsrdsetupscriptfile ]]; then
            cp -f $olsrdsetupscriptfile $olsrddir$(basename $olsrdsetupscriptfile) >/dev/null 2>/dev/null
        fi
        rm -f $olsrdsetupscriptfile >/dev/null 2>/dev/null
    fi

    ###############################
    #  IPv4 OLSRd APPLY function  #
    ###############################
    # enable olsrd4, if checked (will start if initscript is triggered) and run daemon on boot (when initscript is called)
    olsrd4enabled=$(jq -M -r '.olsrd4enabled' $INPUT 2>/dev/null)
    if [[ "$olsrd4enabled" == "on" ]]; then
        sed -i 's/.*START_OLSRD.*/START_OLSRD="YES"/' $olsrd4default
        sed -i 's/.*START_OLSRD.*/START_OLSRD="YES"/' $olsrd4def
    else
        sed -i 's/.*START_OLSRD.*/#START_OLSRD="YES"/' $olsrd4default
        sed -i 's/.*START_OLSRD.*/#START_OLSRD="YES"/' $olsrd4def
    fi
    olsrd4runonboot=$(jq -M -r '.olsrd4runonboot' $INPUT 2>/dev/null)
    defrunlvl=$(grep initdefault /etc/inittab | cut -d: -f2)
    if [[ "$olsrd4runonboot" == "on" ]]; then
        if [[ ! -e $(ls /etc/rc$defrunlvl.d/S*olsrd) ]]; then
            update-rc.d olsrd defaults >> /dev/null
        fi
    else
        if [[ -e $(ls /etc/rc$defrunlvl.d/S*olsrd) ]]; then
            update-rc.d -f olsrd remove >> /dev/null
        fi
    fi
    # set checked interfaces, else set default interface
    enabledv4interfaces="$(jq -M -r '.olsrd4config[] | select(.enabled=="on") | .olsrd4interface' $INPUT 2>/dev/null)"
    olsrd4meshif=$(awk -F" " '/^Interface.*\{/ {print $2}' $olsrd4conf | tr -d \")
    if [[ ! -z $enabledv4interfaces ]]; then
        for int in $enabledv4interfaces; do
            defaultLQ=$(jq -M -r '.olsrd4config[] | select(.olsrd4interface=="'$int'") | .lqdefault' $INPUT)
            mode=$(jq -M -r '.olsrd4config[] | select(.olsrd4interface=="'$int'") | .meshmode' $INPUT)
            autodetectchanges=$(jq -M -r '.olsrd4config[] | select(.olsrd4interface=="'$int'") | .autochanges' $INPUT)
            [ "$mode" ] && new1='    Mode "'$mode'"\n' || new1=""
            [ "$autodetectchanges" ] && new2='    AutoDetectChanges '$autodetectchanges'\n' || new2=""
            if [ "$defaultLQ" ]; then
                (expr $defaultLQ '>=' 1 >/dev/null) && defaultLQ=1.00
                (expr $defaultLQ '<=' 0 >/dev/null) && defaultLQ=0.01
                new3='    LinkQualityMult default '$defaultLQ'\n'
            else
                new3=""
            fi
            if (echo "$olsrd4meshif" | grep -iwq $int); then
                echo "Interface $int is already enabled, check params" >>$log
                sed -i '/^[# \t]*interface[ \t]\+"'$int'"/I,/}/'"cInterface \"$int\" {\n$new1$new2$new3}" $olsrd4conf >>$log 2>>$log
            else
                sed -i '/^[# \t]*interface[ \t]\+"'$int'"/I,/}/ d' $olsrd4conf >>$log 2>>$log
                sed -i '/#interfacesection-end/'"s/#interfacesection-end/Interface \"$int\" {\n$new1$new2$new3}\n#interfacesection-end/" $olsrd4conf >>$log 2>>$log
            fi
        done
        for int in $olsrd4meshif; do
            if ! (echo "$enabledv4interfaces" | grep -iwq $int); then
                echo "Interface $int must be disabled" >>$log
                sed -i '/^[# \t]*interface[ \t]\+"'$int'"/I,/}/ d' $olsrd4conf >>$log 2>>$log
             fi
        done
    else
        echo "remove/comment all IFs in config" >>$log
        for int in $olsrd4meshif; do
            echo "Interface $int must be disabled" >>$log
            sed -i '/^[# \t]*interface[ \t]\+"'$int'"/I,/}/ d' $olsrd4conf >>$log 2>>$log
        done
    fi

    # set ip4broadcast
    olsrd4ip4broadcast=$(jq -M -r '.olsrdsettings[].olsrd4Ip4Broadcast' $INPUT 2>/dev/null | head -1)
    #ensure a valid value for ip4broadcast
    valid_ip "$olsrd4ip4broadcast" || olsrd4ip4broadcast='255.255.255.255';
    sed -i "s/Ip4Broadcast.*/Ip4Broadcast\ $olsrd4ip4broadcast/" $olsrd4conf

    #hna4 entries
    for line in $(sed -e 's/[ \t]*#.*$//' -e '/^[ ]*$/d' $olsrd4conf | sed -n "/hna4/I,/^}/ p" | grep -E "([0-9]{1,3}\.){3}[0-9]{1,3}" | sed -e 's/ /-/g'); do
        ip=$(echo $line | cut -d "-" -f 1)
        mask=$(mask_to_prefix $(echo $line | cut -d "-" -f 2))
        jqmask=$(jq -M -r '.hna4list[] | select(.hna4address=="'$ip'") | .hna4mask' $INPUT)
        if [ "$jqmask" ] && [ $jqmask -eq $mask ]; then
            echo "hna $ip/$mask can stay" >>$log
        else
            echo "remove hna $ip/$mask" >>$log
            subsearch=$(echo $line | cut -d "-" -f 2 | sed -e 's/\./\\./g')
            ipsearch=$(echo $ip | sed -e 's/\./\\./g')
            sed -i "/hna4/I,/^}/ {s/[# \t]*"$ipsearch"[ \t]\+"$subsearch".*$//; /^$/d}" $olsrd4conf
        fi
    done
    for line in $(jq -M -r '.hna4list[] | .hna4address+"-"+.hna4mask' $INPUT); do
        ip=$(echo $line | cut -d "-" -f 1)
        prefix=$(echo $line | cut -d "-" -f 2)
        mask=$(prefix_to_mask $prefix)
        subsearch=$(echo $mask | sed -e 's/\./\\./g')
        ipsearch=$(echo $ip | sed -e 's/\./\\./g')
        if ! (sed -e 's/[ \t]*#.*$//' -e '/^[ ]*$/d' $olsrd4conf | sed -n "/hna4/I,/^}/ p" | grep -qE "[ \t]*$ipsearch[ \t]+$subsearch[# \t]*.*$"); then
          echo "insert hna $ip/$mask" >>$log
          sed -i "/Hna4/,/^}/s/^}/$ip $mask\n}/g" $olsrd4conf
        fi
    done

    # lqmult remove all entries in config
    for line in $(sed -e 's/[ \t]*#.*$//' -e '/^[ ]*$/d' $olsrd4conf | grep -i linkqualitymult | grep -vi default | awk '{print $2"-"$3}'); do
        ip=$(echo $line | cut -d "-" -f 1)
        jqlq=$(jq -M -r '.lq4list[] | select(.lq4address=="'$ip'") | .lq4value' $INPUT)
        [ "$jqlq" ] || jqlq=1.00
        (expr $jqlq '>=' 1 >/dev/null) && jqlq=1.00
        (expr $jqlq '<=' 0 >/dev/null) && jqlq=0.01
        lq=$(echo $line | cut -d "-" -f 2)
        if [ "$jqlq" ] && (expr $jqlq '=' $lq >/dev/null); then
            echo "lq4 $ip/$lq can stay" >>$log
        else
            echo "remove lq4 $ip/$lq" >>$log
            ipsearch=$(echo $ip | sed -e 's/\./\\./g')
            sed -i "/[# \t]*linkqualitymult[ \t]\+"$ipsearch"[ \t]\+.*$/Id" $olsrd4conf
        fi
    done
    for line in $(jq -M -r '.lq4list[] | .lq4address+"-"+.lq4value' $INPUT); do
        jqlq=$(echo $line | cut -d "-" -f 2)
        [ "$jqlq" ] || jqlq=1.00
        (expr $jqlq '>=' 1 >/dev/null) && jqlq=1.00
        (expr $jqlq '<=' 0 >/dev/null) && jqlq=0.01
        ip=$(echo $line | cut -d "-" -f 1)
        ipsearch=$(echo $ip | sed -e 's/\./\\./g')
        if ! (grep -iqE "[# \t]*linkqualitymult[ \t]+$ipsearch[ \t]+.*" $olsrd4conf); then
          echo "insert lq4 $ip/$jqlq" >>$log
          sed -i "/InterfaceDefaults/,/^}/s/^}/LinkQualityMult $ip $jqlq\n}/g" $olsrd4conf
        fi
    done

    # TODO 20180629 
    #-> disablePlugin ok
    #enablePlugin: replace full block: filename, managedPlParams, ignore unmanagedPlParams
    #plugins
    olsrd4plgtxtinfo=$(jq -M -r '.olsrd4plgtxtinfo' $INPUT 2>/dev/null)
    if [[ "$olsrd4plgtxtinfo" == "on" ]]; then
        if [[ $(grep LoadPlugin.*olsrd_txtinfo $olsrd4conf) == \#* ]]; then
            sed -i "/LoadPlugin\ \"olsrd_txt/,/}/"'s/^#//' $olsrd4conf
        fi
    else
        if [[ $(grep LoadPlugin.*olsrd_txtinfo $olsrd4conf) != \#* ]]; then
            sed -i "/LoadPlugin\ \"olsrd_txt/,/}/"'s/^/#/' $olsrd4conf
        fi
    fi
    olsrd4plgjsoninfo=$(jq -M -r '.olsrd4plgjsoninfo' $INPUT 2>/dev/null)
    if [[ "$olsrd4plgjsoninfo" == "on" ]]; then
        if [[ $(grep LoadPlugin.*olsrd_jsoninfo $olsrd4conf) == \#* ]]; then
            sed -i "/LoadPlugin\ \"olsrd_json/,/}/"'s/^#//' $olsrd4conf
        fi
    else
        if [[ $(grep LoadPlugin.*olsrd_jsoninfo $olsrd4conf) != \#* ]]; then
            sed -i "/LoadPlugin\ \"olsrd_json/,/}/"'s/^/#/' $olsrd4conf
        fi
    fi
    olsrd4plghttpinfo=$(jq -M -r '.olsrd4plghttpinfo' $INPUT 2>/dev/null)
    if [[ "$olsrd4plghttpinfo" == "on" ]]; then
        #if disabled, enable
        if [[ $(grep LoadPlugin.*olsrd_httpinfo $olsrd4conf) == \#* ]]; then
            #remove "#" from front
            sed -i "/LoadPlugin\ \"olsrd_http/,/}/"'s/^#//' $olsrd4conf
        fi
        #check for port
        jqport=$(jq -M -r '.httpplg4port' $INPUT)
        #change/uncomment existing line
        (sed -n '/^[ \t]*loadplugin.*olsrd_httpinfo/I,/}/p' $olsrd4conf | grep -iqE "plparam.*port.*$jqport") || sed -i "/LoadPlugin\ \"olsrd_http/,/}/"'s/^.*plparam.*port.*$/  PlParam "Port" "'$jqport'"/I' $olsrd4conf
        #add line if missing
        (sed -n '/^[# \t]*loadplugin.*olsrd_httpinfo/I,/}/p' $olsrd4conf | grep -qE 'PlParam.*"Port"') || sed -i '/LoadPlugin\ \"olsrd_http/,/}/ {s/{/{\n  PlParam "Port" "'$jqport'"/ }' $olsrd4conf
        #check PlParams for host and net
        case "$(jq -r '.httpplg4who' $INPUT)" in
          "any")       liste="0.0.0.0/0";;
          "funkfeuer") liste=$(echo -e "127.0.0.1/32\n10.0.0.0/8\n78.41.112.0/21\n193.238.156.0/22\n185.194.20.0/22");;
          "custom")    liste=$(jq -M -r '.httpplg4list[] | .httpplg4ip+"/"+.httpplg4mask' $INPUT);;
          *)           liste="127.0.0.1/32";;
        esac
        #add or uncomment wizard-list
        for line in $liste; do
            (echo "$line" | grep -q "/") || continue;
            prefix=$(echo "$line" | cut -d"/" -f2)
            [ $prefix -ge 0 ] && [ $prefix -le 32 ] && mask=" "$(prefix_to_mask $prefix) || continue
            [ $prefix -eq 32 ] && param="Host" && mask="" || param="Net"
            ip=$(echo "$line" | cut -d"/" -f1)
            #uncomment existing line if commented
            (sed -n '/^[# \t]*loadplugin.*olsrd_httpinfo/I,/}/p' $olsrd4conf | grep -qiE '[# \t]+plparam[ \t]+"'$param'"[ \t]+"'$ip"$mask"'"') && 
                sed -i "/LoadPlugin\ \"olsrd_http/,/}/"'s/^[# \t]\+plparam[ \t]\+"'$param'"[ \t]\+"'$ip"$mask"'"/  PlParam "'$param'"   "'$ip"$mask"'"/I' $olsrd4conf
            #add line if missing
            (sed -n '/^[# \t]*loadplugin.*olsrd_httpinfo/I,/}/p' $olsrd4conf | grep -qiE '.*plparam[ \t]+"'$param'"[ \t]+"'$ip"$mask"'"') || 
                sed -i '/LoadPlugin\ \"olsrd_http/,/}/ {s/}/  PlParam "'$param'"   "'$ip"$mask"'"\n}/ }' $olsrd4conf
        done
        #check and disable existing params
        for line in $(sed -n '/^[ \t]*loadplugin.*olsrd_httpinfo/I,/}/p' $olsrd4conf | grep -iE '^[ \t]*plparam.*"net"|^[ \t]*plparam.*"host"'|  awk '{gsub("\"","",$0); printf $3; if ($2=="Net") {print "+"$4;} else {print "+255.255.255.255";}}'); do
            ip=$(echo $line | cut -d+ -f1)
            mask=" "$(echo $line | cut -d+ -f2)
            if ! (echo "$liste" | grep -qiE "$ip.*$(mask_to_prefix $mask)"); then
                pre=$(mask_to_prefix $mask)
                [ $pre -eq 32 ] && param="Host" && mask="" || param="Net"
                sed -i "/LoadPlugin\ \"olsrd_http/,/}/"'s/^.*plparam[ \t]\+"'$param'"[ \t]\+"'$ip"$mask"'"/  #PlParam "'$param'"   "'$ip"$mask"'"/I' $olsrd4conf
            fi 
        done
    else
        #if enabled, disable it
        if [[ $(grep LoadPlugin.*olsrd_httpinfo $olsrd4conf) != \#* ]]; then
            #disable plugin by adding "#" in front of line
            sed -i "/LoadPlugin\ \"olsrd_http/,/}/"'s/^/#/' $olsrd4conf
        fi
    fi




    olsrd4watchdog=$(jq -M -r '.olsrd4watchdog' $INPUT 2>/dev/null)
    if [[ "$olsrd4watchdog" == "on" ]]; then
        if [ $(grep -c LoadPlugin.*olsrd_watchdog $olsrd4conf) -eq 0 ]; then
            echo '#LoadPlugin "olsrd_watchdog.so.0.1"
#{
  #PlParam "file" "/tmp/olsrd.watchdog"
  #PlParam "interval" "5"
#}
' >>$olsrd4conf
        fi
        if [[ $(grep LoadPlugin.*olsrd_watchdog $olsrd4conf) == \#* ]]; then
            sed -i "/LoadPlugin\ \"olsrd_watchdog/,/}/"'s/^#//' $olsrd4conf
            sed -i "/LoadPlugin\ \"olsrd_watchdog/,/}/"'s/#PlParam "file" "\/tmp\/olsrd.watchdog"/PlParam "file" "\/tmp\/olsrd.watchdog"/' $olsrd4conf
            sed -i "/LoadPlugin\ \"olsrd_watchdog/,/}/"'s/#PlParam "interval" "5"/PlParam "interval" "5"/' $olsrd4conf
        fi
    else
        if [ $(grep -c LoadPlugin.*olsrd_watchdog $olsrd4conf) \> 0 ] && [[ $(grep LoadPlugin.*olsrd_watchdog $olsrd4conf) != \#* ]]; then
            sed -i "/LoadPlugin\ \"olsrd_watchdog/,/}/"'s/^/#/' $olsrd4conf
        fi
    fi


    ###############################
    #  IPv6 OLSRd APPLY function  #
    ###############################
    # enable olsrd6, if checked (will start if initscript is triggered) and run daemon on boot (when initscript is called)
    olsrd6enabled=$(jq -M -r '.olsrd6enabled' $INPUT 2>/dev/null)
    if [[ "$olsrd6enabled" == "on" ]]; then
        sed -i 's/.*START_OLSRD.*/START_OLSRD="YES"/' $olsrd6default
        sed -i 's/.*START_OLSRD.*/START_OLSRD="YES"/' $olsrd6def
    else
        sed -i 's/.*START_OLSRD.*/#START_OLSRD="YES"/' $olsrd6default
        sed -i 's/.*START_OLSRD.*/#START_OLSRD="YES"/' $olsrd6def
    fi
    olsrd6runonboot=$(jq -M -r '.olsrd6runonboot' $INPUT 2>/dev/null)
    defrunlvl=$(grep initdefault /etc/inittab | cut -d: -f2)
    if [[ "$olsrd6runonboot" == "on" ]]; then
        if [[ ! -e $(ls /etc/rc$defrunlvl.d/S*olsrd6) ]]; then
            update-rc.d olsrd6 defaults >> /dev/null
        fi
    else
        if [[ -e $(ls /etc/rc$defrunlvl.d/S*olsrd6) ]]; then
            update-rc.d -f olsrd6 remove >> /dev/null
        fi
    fi
    # set checked interfaces, else set default interface
    enabledv6interfaces="$(jq -M -r '.olsrd6config[] | select(.enabled=="on") | .olsrd6interface' $INPUT 2>/dev/null)"
    olsrd6meshif=$(awk -F" " '/^Interface.*\{/ {print $2}' $olsrd6conf | tr -d \")
    if [[ ! -z $enabledv6interfaces ]]; then
        for int in $enabledv6interfaces; do
            defaultLQ=$(jq -M -r '.olsrd6config[] | select(.olsrd6interface=="'$int'") | .lqdefault' $INPUT)
            mode=$(jq -M -r '.olsrd6config[] | select(.olsrd6interface=="'$int'") | .meshmode' $INPUT)
            autodetectchanges=$(jq -M -r '.olsrd6config[] | select(.olsrd6interface=="'$int'") | .autochanges' $INPUT)
            [ "$mode" ] && new1='    Mode "'$mode'"\n' || new1=""
            [ "$autodetectchanges" ] && new2='    AutoDetectChanges '$autodetectchanges'\n' || new2=""
            if [ "$defaultLQ" ]; then
                (expr $defaultLQ '>=' 1 >/dev/null) && defaultLQ=1.00
                (expr $defaultLQ '<=' 0 >/dev/null) && defaultLQ=0.01
                new3='    LinkQualityMult default '$defaultLQ'\n'
            else
                new3=""
            fi
            if (echo "$olsrd6meshif" | grep -iwq $int); then
                echo "Interface $int is already enabled, check params" >>$log
                sed -i '/^[# \t]*interface[ \t]\+"'$int'"/I,/}/'"cInterface \"$int\" {\n$new1$new2$new3}" $olsrd6conf >>$log 2>>$log
            else
                sed -i '/^[# \t]*interface[ \t]\+"'$int'"/I,/}/ d' $olsrd6conf >>$log 2>>$log
                sed -i '/#interfacesection-end/'"s/#interfacesection-end/Interface \"$int\" {\n$new1$new2$new3}\n#interfacesection-end/" $olsrd6conf >>$log 2>>$log
            fi
        done
        for int in $olsrd6meshif; do
            if ! (echo "$enabledv6interfaces" | grep -iwq $int); then
                echo "Interface $int must be disabled" >>$log
                sed -i '/^[# \t]*interface[ \t]\+"'$int'"/I,/}/ d' $olsrd6conf >>$log 2>>$log
             fi
        done
    else
        echo "remove/comment all IFs in config" >>$log
        for int in $olsrd6meshif; do
            echo "Interface $int must be disabled" >>$log
            sed -i '/^[# \t]*interface[ \t]\+"'$int'"/I,/}/ d' $olsrd6conf >>$log 2>>$log
        done
    fi

    #hna6 entries
    for line in $(sed -e 's/[ \t]*#.*$//' -e '/^[ ]*$/d' $olsrd6conf | sed -n "/hna6/I,/^}/ p" | grep -E ":" | sed -e 's/ /-/g'); do
        ip=$(echo $line | cut -d "-" -f 1)
        mask=$(echo $line | cut -d "-" -f 2)
        jqmask=$(jq -M -r '.hna6list[] | select(.hna6address=="'$ip'") | .hna6mask' $INPUT)
        if [ "$jqmask" ] && [ $jqmask -eq $mask ]; then
            echo "hna $ip/$mask can stay" >>$log
        else
            echo "remove hna $ip/$mask" >>$log
            subsearch=$(echo $line | cut -d "-" -f 2 | sed -e 's/\./\\./g')
            ipsearch=$(echo $ip | sed -e 's/\./\\./g')
            sed -i "/hna6/I,/^}/ {s/[# \t]*"$ipsearch"[ \t]\+"$subsearch".*$//; /^$/d}" $olsrd6conf
        fi
    done
    for line in $(jq -M -r '.hna6list[] | .hna6address+"-"+.hna6mask' $INPUT); do
        ip=$(echo $line | cut -d "-" -f 1)
        mask=$(echo $line | cut -d "-" -f 2)
        subsearch=$(echo $mask | sed -e 's/\./\\./g')
        ipsearch=$(echo $ip | sed -e 's/\./\\./g')
        if ! (sed -e 's/[ \t]*#.*$//' -e '/^[ ]*$/d' $olsrd6conf | sed -n "/hna6/I,/^}/ p" | grep -qE "[ \t]*$ipsearch[ \t]+$subsearch[# \t]*.*$"); then
          echo "insert hna $ip/$mask" >>$log
          sed -i "/Hna6/,/^}/s/^}/$ip $mask\n}/g" $olsrd6conf
        fi
    done

    # lqmult remove all entries in config
    for line in $(sed -e 's/[ \t]*#.*$//' -e '/^[ ]*$/d' $olsrd6conf | grep -i linkqualitymult | grep -vi default | awk '{print $2"-"$3}'); do
        ip=$(echo $line | cut -d "-" -f 1)
        jqlq=$(jq -M -r '.lq6list[] | select(.lq6address=="'$ip'") | .lq6value' $INPUT)
        [ "$jqlq" ] || jqlq=1.00
        (expr $jqlq '>=' 1 >/dev/null) && jqlq=1.00
        (expr $jqlq '<=' 0 >/dev/null) && jqlq=0.01
        lq=$(echo $line | cut -d "-" -f 2)
        if [ "$jqlq" ] && (expr $jqlq '=' $lq >/dev/null); then
            echo "lq6 $ip/$lq can stay" >>$log
        else
            echo "remove lq6 $ip/$lq" >>$log
            ipsearch=$(echo $ip | sed -e 's/\./\\./g')
            sed -i "/[# \t]*linkqualitymult[ \t]\+"$ipsearch"[ \t]\+.*$/Id" $olsrd6conf
        fi
    done
    for line in $(jq -M -r '.lq6list[] | .lq6address+"-"+.lq6value' $INPUT); do
        jqlq=$(echo $line | cut -d "-" -f 2)
        [ "$jqlq" ] || jqlq=1.00
        (expr $jqlq '>=' 1 >/dev/null) && jqlq=1.00
        (expr $jqlq '<=' 0 >/dev/null) && jqlq=0.01
        ip=$(echo $line | cut -d "-" -f 1)
        ipsearch=$(echo $ip | sed -e 's/\./\\./g')
        if ! (grep -iqE "[# \t]*linkqualitymult[ \t]+$ipsearch[ \t]+.*" $olsrd6conf); then
          echo "insert lq6 $ip/$jqlq" >>$log
          sed -i "/InterfaceDefaults/,/^}/s/^}/LinkQualityMult $ip $jqlq\n}/g" $olsrd6conf
        fi
    done

    #plugins
    olsrd6plgtxtinfo=$(jq -M -r '.olsrd6plgtxtinfo' $INPUT 2>/dev/null)
    if [[ "$olsrd6plgtxtinfo" == "on" ]]; then
        if [[ $(grep LoadPlugin.*olsrd_txtinfo $olsrd6conf) == \#* ]]; then
            sed -i "/LoadPlugin\ \"olsrd_txt/,/}/"'s/^#//' $olsrd6conf
        fi
    else
        if [[ $(grep LoadPlugin.*olsrd_txtinfo $olsrd6conf) != \#* ]]; then
            sed -i "/LoadPlugin\ \"olsrd_txt/,/}/"'s/^/#/' $olsrd6conf
        fi
    fi
    olsrd6plgjsoninfo=$(jq -M -r '.olsrd6plgjsoninfo' $INPUT 2>/dev/null)
    if [[ "$olsrd6plgjsoninfo" == "on" ]]; then
        if [[ $(grep LoadPlugin.*olsrd_jsoninfo $olsrd6conf) == \#* ]]; then
            sed -i "/LoadPlugin\ \"olsrd_json/,/}/"'s/^#//' $olsrd6conf
        fi
    else
        if [[ $(grep LoadPlugin.*olsrd_jsoninfo $olsrd6conf) != \#* ]]; then
            sed -i "/LoadPlugin\ \"olsrd_json/,/}/"'s/^/#/' $olsrd6conf
        fi
    fi
    olsrd6plghttpinfo=$(jq -M -r '.olsrd6plghttpinfo' $INPUT 2>/dev/null)
    if [[ "$olsrd6plghttpinfo" == "on" ]]; then
        if [[ $(grep LoadPlugin.*olsrd_httpinfo $olsrd6conf) == \#* ]]; then
            sed -i "/LoadPlugin\ \"olsrd_http/,/}/"'s/^#//' $olsrd6conf
            sed -i "/LoadPlugin\ \"olsrd_http/,/}/"'s/#PlParam "Port" "8081"/PlParam "Port" "8081"/' $olsrd6conf
            sed -i "/LoadPlugin\ \"olsrd_http/,/}/"'s/#PlParam "Net" "0::/0"/PlParam "Net" "0::/0"/' $olsrd6conf
        fi
    else
        if [[ $(grep LoadPlugin.*olsrd_httpinfo $olsrd6conf) != \#* ]]; then
            sed -i "/LoadPlugin\ \"olsrd_http/,/}/"'s/^/#/' $olsrd6conf
        fi
    fi
    olsrd6watchdog=$(jq -M -r '.olsrd6watchdog' $INPUT 2>/dev/null)
    if [[ "$olsrd6watchdog" == "on" ]]; then
        if [ $(grep -c LoadPlugin.*olsrd_watchdog $olsrd6conf) -eq 0 ]; then
            echo '#LoadPlugin "olsrd_watchdog.so.0.1"
#{
  #PlParam "file" "/tmp/olsrd6.watchdog"
  #PlParam "interval" "5"
#}
' >>$olsrd6conf
        fi
        if [[ $(grep LoadPlugin.*olsrd_watchdog $olsrd6conf) == \#* ]]; then
            sed -i "/LoadPlugin\ \"olsrd_watchdog/,/}/"'s/^#//' $olsrd6conf
            sed -i "/LoadPlugin\ \"olsrd_watchdog/,/}/"'s/#PlParam "file" "\/tmp\/olsrd.watchdog"/PlParam "file" "\/tmp\/olsrd6.watchdog"/' $olsrd6conf
            sed -i "/LoadPlugin\ \"olsrd_watchdog/,/}/"'s/#PlParam "interval" "5"/PlParam "interval" "5"/' $olsrd6conf
        fi
    else
        if [ $(grep -c LoadPlugin.*olsrd_watchdog $olsrd6conf) \> 0 ] && [[ $(grep LoadPlugin.*olsrd_watchdog $olsrd6conf) != \#* ]]; then
            sed -i "/LoadPlugin\ \"olsrd_watchdog/,/}/"'s/^/#/' $olsrd6conf
        fi
    fi

    ###############################
    #  IPv6 OLSRd APPLY end       #
    ###############################

    # if one of enabled interfaces is a bridge, drop forwarded ethernet frames, else accept
    if [[ $(grep ^MESH_IF $olsrd4default) == *"br"* ]] || [[ $(grep ^MESH_IF $olsrd6default) == *"br"* ]]; then
        if [[ $(grep -E "^ebtables\ \-P\ FORWARD\ DROP" /config/scripts/pre-config.d/ebtables.sh 2>/dev/null | wc -l) == 0 ]]; then
            if [ ! -d /config/scripts/pre-config.d ]; then
                # create missing directory
                mkdir /config/scripts/pre-config.d >>$log 2>>$log
                chmod --reference=/config/scripts/post-config.d /config/scripts/pre-config.d >>$log 2>>$log
                chown --reference=/config/scripts/post-config.d /config/scripts/pre-config.d >>$log 2>>$log
            fi
            if [ ! -f /config/scripts/pre-config.d/ebtables.sh ]; then
                #create file
                echo -e '#!/bin/sh\n#olsrdwizard: dont forward ethernet frames between bridge ports\nebtables -P FORWARD DROP\nexit 0' > /config/scripts/pre-config.d/ebtables.sh
                chmod 755 /config/scripts/pre-config.d/ebtables.sh
            else
                #add lines to file on top
                linenumber=2
                sed -i $linenumber'i\
#olsrdwizard: dont forward ethernet frames between bridge ports\
ebtables -P FORWARD DROP' /config/scripts/pre-config.d/ebtables.sh >>$log 2>>$log
            fi
            ebtables -P FORWARD DROP
        fi
    else
        if [[ $(grep -E "^#olsrdwizard:|^ebtables\ \-P\ FORWARD\ DROP" /config/scripts/pre-config.d/ebtables.sh 2>/dev/null | wc -l) == 2 ]]; then
            sed -i '/^#olsrdwizard:.*/d' /config/scripts/pre-config.d/ebtables.sh
            sed -i '/^ebtables\ \-P\ FORWARD\ DROP/d' /config/scripts/pre-config.d/ebtables.sh
            ebtables -P FORWARD ACCEPT
        fi
    fi

    ####### wizard manual update from github
    # update wizard from github
    # load actual sources (ignoring releases)
    updatefromgithub=$(jq -M -r '.updatefromgithub' $INPUT 2>/dev/null)
    olsrdwizard=""
    for i in $(find /config/wizard/feature/ -name wizard.html | grep -i olsr); do
        if [[ $(head $i -n 10 | grep 'OLSRd_V1') ]]; then
            olsrdwizard=$i
            break
        fi
    done
    if [[ "$updatefromgithub" == "on" ]]; then
        echo "update from github requested" >>$log 2>>$log
        if [ ! $olsrdwizard ]; then
            echo "error: OLSRd_V1 wizard.html not found!" >>$log 2>>$log
        elif [ $((onlinecheck)) != 0 ]; then
            echo "currently offline" >>$log 2>>$log
        else
            curl -sL -o /tmp/ER-wizard-OLSRd_V1_latest.tar.gz --connect-timeout 2 --speed-time 2 https://api.github.com/repos/$gitowner/$gitrepo/tarball >>$log 2>>$log
            tar   -xvzf /tmp/ER-wizard-OLSRd_V1_latest.tar.gz -C /tmp >/tmp/result.txt 2>>$log
            rm -f       /tmp/ER-wizard-OLSRd_V1_latest.tar.gz >>$log 2>>$log
            while read LINE; do
              set $LINE
              if [ $(basename $LINE) == "wizard-run" ] || [ $(basename $LINE) == "wizard.html" ] || [ $(basename $LINE) == "validator.json" ]; then W=1; else W=2; fi
              [ -f "/tmp/"$LINE ] && [ $W == "1" ] && cp "/tmp/"$LINE $(dirname $olsrdwizard)"/"$(basename $LINE) >>$log 2>>$log
            done < /tmp/result.txt
            rm /tmp/result.txt >>$log 2>>$log
            rm -Rf /tmp/$gitowner-$gitrepo* >>$log 2>>$log
            chmod 755 $(dirname $olsrdwizard)"/"wizard-run >>$log 2>>$log
            # before current WebGui session will break due to olsrd-install/restart, send success to browser
            echo "{\"success\":\"1\"}"
            ret="99"
            $(dirname $olsrdwizard)"/"wizard-run load >>$log 2>>$log
            echo "EdgeMAX OLSRd_V1 Wizard stopped $(date +%Y-%m-%d/%H:%M:%S.%N) - Session="$$ >>$log
        fi
    fi
    autoupdatefromgithub=$(jq -M -r '.autoupdatefromgithub' $INPUT 2>/dev/null)
    if [[ "$autoupdatefromgithub" == "on" ]]; then
        #check for auto-update wizard, install if not there!!
        wiz=""
        for i in $(find /config/wizard/feature/ -name wizard.html); do
            if [[ $(head $i -n 10 | grep "ER-wizard-AutoUpdate") ]]; then
                wiz=$i
                break
            fi
        done
        if [ ! $wiz ]; then 
            #autoupdate-wizard mit scripten fehlt: offline-install
            wiz="/config/wizard/feature/AutoUpdate/wizard.html"
            echo "Installing "$(dirname $wiz)"..." >>$log 2>>$log
            if [ ! -d $(dirname $wiz) ]; then 
                mkdir $(dirname $wiz) >>$log 2>>$log
                chmod --reference=$(dirname $olsrdwizard) $(dirname $wiz) >>$log 2>>$log
                chown --reference=$(dirname $olsrdwizard) $(dirname $wiz) >>$log 2>>$log
            fi
            #extract offline --> replaces download-procedure, Version 20180628, https://github.com/pocki80/ER-wizard-AutoUpdate
            echo "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
AHIAAA==
" | base64 -d >/tmp/ER-wizard.tar.gz 2>>$log
            tar   -xvzf /tmp/ER-wizard.tar.gz -C /tmp >/tmp/result.txt 2>>$log
            rm -f       /tmp/ER-wizard.tar.gz >>$log 2>>$log
            while read LINE; do
                set $LINE
                if [ $(basename $LINE) == "wizard-run" ] || [ $(basename $LINE) == "wizard.html" ] || [ $(basename $LINE) == "validator.json" ]; then W=1; else W=2; fi
                if [ -f "/tmp/"$LINE ] && [ $W == "1" ]; then
                    sudo cp "/tmp/"$LINE $(dirname $wiz)"/"$(basename $LINE) >>$log 2>>$log
                    sudo chmod --reference=$(dirname $olsrdwizard)"/"$(basename $LINE) $(dirname $wiz)"/"$(basename $LINE) >>$log 2>>$log
                    sudo chown --reference=$(dirname $olsrdwizard)"/"$(basename $LINE) $(dirname $wiz)"/"$(basename $LINE) >>$log 2>>$log
                fi
            done < /tmp/result.txt
            rm /tmp/result.txt
            rm -Rf /tmp/$git2owner-$git2repo* >>$log 2>>$log
            chmod 755 $(dirname $wiz)"/"wizard-run >>$log 2>>$log
            echo "Installing done, now triggering initial load..." >>$log 2>>$log
            $(dirname $wiz)"/"wizard-run load  >>$log 2>>$log
        fi
        #remove "no" if exists
        if [ -f /config/user-data/autoupdate.dat ] &&
           [ "$(grep -i "wizard-olsrd_v1=no" /config/user-data/autoupdate.dat |wc -l)" == "1" ]; then
            linenumber=$(grep -ni "wizard-olsrd_v1=no" /config/user-data/autoupdate.dat | awk -F: {'print $1'})
            sed -i $linenumber'd' /config/user-data/autoupdate.dat 2>>$log
            sed -i '/^$/d' /config/user-data/autoupdate.dat 2>>$log
        fi
        if [ ! -f /config/user-data/autoupdate.dat ]; then
            #create settings file if missing
            echo 'wizard-olsrd_v1=yes' >/config/user-data/autoupdate.dat 2>>$log
            echo '' >>/config/user-data/autoupdate.dat 2>>$log
            sed -i '/^$/d' /config/user-data/autoupdate.dat 2>>$log
        else
            #add yes line if missing
            if [ "$(grep -i "wizard-olsrd_v1=yes" /config/user-data/autoupdate.dat |wc -l)" == "0" ]; then
                echo 'wizard-olsrd_v1=yes' >>/config/user-data/autoupdate.dat 2>>$log
                echo '' >>/config/user-data/autoupdate.dat 2>>$log
                sed -i '/^$/d' /config/user-data/autoupdate.dat 2>>$log
            fi
        fi
    else
        #remove yes line if exists
        if [ -f /config/user-data/autoupdate.dat ] &&
           [ "$(grep -i "wizard-olsrd_v1=yes" /config/user-data/autoupdate.dat |wc -l)" == "1" ]; then
            linenumber=$(grep -ni "wizard-olsrd_v1=yes" /config/user-data/autoupdate.dat | awk -F: {'print $1'})
            sed -i $linenumber'd' /config/user-data/autoupdate.dat 2>>$log
            sed -i '/^$/d' /config/user-data/autoupdate.dat 2>>$log
        fi
    fi
    # end
    ####### wizard manual update from github

    olsrdrestartnow=$(jq -M -r '.olsrdrestartnow' $INPUT 2>/dev/null)
    olsrdrestart6now=$(jq -M -r '.olsrdrestart6now' $INPUT 2>/dev/null)
    if [[ "$olsrdrestartnow" == "on" ]]; then
        # fix the pid-file to match the process id running in order to mark init.d#restart work properly
        running=$(ps aux | grep olsrd4 | grep -v grep | awk '{print $2'}) 2>/dev/null
        if [ "$running" ]; then
          pidfile=$(cat /var/run/olsrd.pid 2>/dev/null)
          if [ "$pidfile" ]; then
            if [ $running -eq $pidfile ]; then
              echo "Compared PIDs from process ("$running") and pid-file ("$pidfile"): all is fine - restarting" >>$log
              $olsrd4init restart >>$log
            else
              echo "PID from process ("$running") not matching pid-file ("$pidfile")!" >>$log
              echo "Killing process..." >>$log
              kill $running
              echo "Removing pidfile..." >>$log
              rm -f /var/run/olsrd.pid >>$log 2>>$log
              echo "Starting process..". >>$log
              $olsrd4init start
              echo "PID done..." >>$log
            fi
          else
            echo "No PID for process ("$running") found!" >>$log
            echo "Killing process..." >>$log
            kill $running
            echo "Starting process..." >>$log
            $olsrd4init start
            echo "PID done..." >>$log
          fi
        else
          echo "PID-Check: no process running." >>$log
          [ -f /var/run/olsrd.pid ] && echo Removing PID-file >>$log && rm /var/run/olsrd.pid >>$log 2>>$log
          echo "Starting process..." >>$log
          $olsrd4init start >>$log
          echo "PID done..." >>$log
        fi
        # restart daemon v4
    fi
    if [[ "$olsrdrestart6now" == "on" ]]; then
        # restart daemon v6
        $olsrd6init restart >>$log
    fi

    # for debugging purposes
    cp $INPUT /tmp/result.json 2>/dev/null

    if [ "$ret" == "99" ]; then
        echo "result already sent, so do nothing here" >/dev/null
    else
        echo '{"success":"1"}'
    fi

}

case "$ACTION" in
    load)
        load
        ;;
    apply)
        apply
        ;;
esac

echo "EdgeMAX OLSRd_V1 Wizard ended $(date +%Y-%m-%d/%H:%M:%S.%N) - Session="$$ >>$log
