#!/bin/bash

#
# EdgeMAX Wizard "OLSRd_V1" created 03/2016 by Onetrix.net for FunkFeuer.at
# Version [0962a/201806260]
# ^-- previous line is used from bmk-webstatus-package as version identification, dont remove "Version "
#
# Github repository: https://github.com/vchrizz/ER-wizard-OLSRd_V1/
#
# Works on all EdgeRouter and EdgePoint Devices (system version 1.9.0+)
#
# known bugs:
# *) WebUI: feature wizard "TCP MSS clamping" hangs when feature wizard "OLSRd_V1" is added
# *) wizard.html: wrong position of olsrd logo in mozilla firefox (10px lower than should be)
# updates:
# *) 06/2018 wizard totally re-written
#

ACTION=$1
INPUT=$2

log="/var/log/0xffolsrd.log"
cfgusrdir="/config/user-data/"
olsrddir="/config/olsrd/"
olsrd4conf="${olsrddir}olsrd4.conf"
olsrd4def="${olsrddir}olsrd4default"
olsrdsetupscriptfile="/config/scripts/post-config.d/olsrd_setup.sh"

# default olsrd configuration files
olsrdconfig='/etc/olsrd/olsrd.conf'
olsrd4init='/etc/init.d/olsrd'
olsrd4default='/etc/default/olsrd'
olsrd4bin='/usr/sbin/olsrd'
olsrd6init='/etc/init.d/olsrd6'
olsrd6default='/etc/default/olsrd6'
olsrd6bin='/usr/sbin/olsrd6'
# user-defined olsrd configuration files
#olsrd4config="${cfgusrdir}olsrd4.conf"
#olsrd6config="${cfgusrdir}olsrd6.conf"
olsrd4config="${olsrddir}olsrd4.conf"
olsrd6config="${olsrddir}olsrd6.conf"

#define update sources on github
gitowner="vchrizz"
gitrepo="ER-wizard-OLSRd_V1"
gitbranch="prepare-097"

#
# DO NOT EDIT BELOW HERE !
#

echo "EdgeMAX OLSRd_V1 Wizard started $(date +%Y-%m-%d/%H:%M:%S.%N) - Session="$$ >>$log

#function to write setup-script
writesetupscript () {
    cat >/tmp/olsrdsetupscriptfile <<'ENDSCRIPTCONTENT'
#!/bin/bash
log="/var/log/0xffolsrd.log"
cfgusrdir="/config/user-data/"
olsrddir="/config/olsrd/"
olsrd4conf="${olsrddir}olsrd4.conf"
olsrd4def="${olsrddir}olsrd4default"
echo "Running olsrdsetupscriptfile script... $(date +%Y-%m-%d/%H:%M:%S.%N)" >>$log
if [ -x /usr/sbin/olsrd ] && [ -f $olsrd4conf ]; then
    echo "olsrd seems to be installed $(date +%Y-%m-%d/%H:%M:%S.%N)" >>$log
    exit 0
fi
olsrdv1wizard=""
for i in $(find /config/wizard/feature/ -name wizard-run | grep -i olsr); do
    if [[ $(head $i -n 10 | grep 'OLSRd_V1') ]]; then
        olsrdv1wizard=$i
        break
    fi
done
if [ ! $olsrdv1wizard ]; then
    echo "error: OLSRd_V1 wizard not found!" >>$log
    exit
fi
echo '#!/bin/bash' >func.sh
sed -n "/^installolsrd ()/,/^}/p" $olsrdv1wizard >>func.sh
sed -n "/^setupv4olsrd ()/,/^}/p" $olsrdv1wizard >>func.sh
sed -n "/^setupv6olsrd ()/,/^}/p" $olsrdv1wizard >>func.sh
sed -n "/^load ()/,/^}/p" $olsrdv1wizard >>func.sh
source func.sh
load >>$log
rm -f func.sh 
/etc/init.d/olsrd restart >>$log 2>>$log
/etc/init.d/olsrd6 restart >>$log 2>>$log
echo "Finished olsrdsetupscriptfile script... $(date +%Y-%m-%d/%H:%M:%S.%N)" >>$log
exit 0
ENDSCRIPTCONTENT
}


#base64begin: olsrd packages for offline use
# !dont edit or remove this comment!
# other files than wizard-run/wizard.html/validator.json are ignored when uploading wizards to the router.
# if no internet connection is possible for download, we need to upload olsrd packages manually (e.g. via scp).
# here are the required packages for mips and mipsel in base64 format.
# they will be extracted into $cfgusrdir at first run of this script.
#

echo "Starting Wizard-Installation Block ... $(date +%Y-%m-%d/%H:%M:%S.%N)" >>$log

# migrate ebtables command to correct location
if [ $(grep -E "^#olsrdwizard:|^ebtables\ \-P\ FORWARD\ DROP" /etc/rc.local | wc -l) == 2 ]; then
    # old setup using rc.local detected, migrate to pre-config.d
    sed -i '/^#olsrdwizard:.*/d' /etc/rc.local >>$log 2>>$log
    sed -i '/^ebtables\ \-P\ FORWARD\ DROP/d' /etc/rc.local >>$log 2>>$log
    if [ ! -d /config/scripts/pre-config.d ]; then
        # create missing directory
        mkdir /config/scripts/pre-config.d >>$log 2>>$log
        chmod --reference=/config/scripts/post-config.d /config/scripts/pre-config.d >>$log 2>>$log
        chown --reference=/config/scripts/post-config.d /config/scripts/pre-config.d >>$log 2>>$log
    fi
    if [ ! -f /config/scripts/pre-config.d/ebtables.sh ]; then
        echo -e '#!/bin/sh\n#olsrdwizard: dont forward ethernet frames between bridge ports\nebtables -P FORWARD DROP\nexit 0' > /config/scripts/pre-config.d/ebtables.sh
        chmod 755 /config/scripts/pre-config.d/ebtables.sh
    fi
fi

# rewrite setup script file to be up-to-date
writesetupscript
if [ -f $olsrdsetupscriptfile ]; then    #enabled
    cp -f /tmp/olsrdsetupscriptfile $olsrdsetupscriptfile
    chmod +x $olsrdsetupscriptfile
    rm /tmp/olsrdsetupscriptfile
else    #disabled, save to user-data
    cp -f /tmp/olsrdsetupscriptfile $olsrddir$(basename $olsrdsetupscriptfile) >/dev/null
    chmod +x $olsrddir$(basename $olsrdsetupscriptfile) >/dev/null
    rm /tmp/olsrdsetupscriptfile
fi

#Remove future versions from user-data directory
#rm -f /config/user-data/olsrd*0.9.6.2-1*.deb >/dev/null
rm -f /config/user-data/olsrd*0.9.5-1*.deb >/dev/null

# CPO remove old installer script!
echo "clean up old install-scripts and package files..." >>$log
[ -f olsrd-install.log ] && rm -f olsrd-install.log
[ -f /config/user-data/olsrd-install.log ] && rm -f /config/user-data/olsrd-install.log
[ -f "/config/scripts/post-config.d/install_olsrdv4.sh" ] && rm /config/scripts/post-config.d/install_olsrdv4.sh >>$log
[ -f "/config/scripts/post-config.d/install_olsrdv6.sh" ] && rm /config/scripts/post-config.d/install_olsrdv6.sh >>$log
[ -f "/config/user-data/olsrd_setup.sh" ] && rm /config/user-data/olsrd_setup.sh >>$log
[ -f "/config/user-data/dpkg.log" ] && rm /config/user-data/dpkg.log >>$log
[ -f "/config/user-data/dpkg.sh" ] && rm /config/user-data/dpkg.sh >>$log
[ -f "/config/user-data/olsrd-plugins_0.6.6.2-1_mipsel.deb" ] && rm /config/user-data/olsrd-plugins_0.6.6.2-1_mipsel.deb >>$log
[ -f "/config/user-data/olsrd_0.6.6.2-1_mipsel.deb" ] && rm /config/user-data/olsrd_0.6.6.2-1_mipsel.deb >>$log
[ -f "/config/user-data/olsrd-plugins_0.6.6.2-1_mips.deb" ] && rm /config/user-data/olsrd-plugins_0.6.6.2-1_mips.deb >>$log
[ -f "/config/user-data/olsrd_0.6.6.2-1_mips.deb" ] && rm /config/user-data/olsrd_0.6.6.2-1_mips.deb >>$log
[ -f "/config/user-data/0xFF-BMK-webstatus_1.0.deb" ] && rm /config/user-data/0xFF-BMK-webstatus_1.0.deb >>$log
[ -f "/config/user-data/0xFF-BMK-webstatus_1.4.deb" ] && rm /config/user-data/0xFF-BMK-webstatus_1.4.deb >>$log
[ -f "/etc/olsrdwatchdog" ] && rm /etc/olsrdwatchdog >>$log


echo "detected $arch architecture, extracting packages olsrd and olsrd-plugins ..." >>$log
if [ $arch == 'mips' ]; then
# base64: olsrd_0.9.0.3-1_mips.deb
echo "
" | base64 -d > $cfgusrdir/olsrd_0.9.0.3-1_mips.deb
[[ $? == 0 ]] && echo "extracted $arch olsrd." >>$log || echo "extraction of $arch olsrd failed" >>$log
# base64: olsrd-plugins_0.9.0.3-1_mips.deb
echo "
" | base64 -d > $cfgusrdir/olsrd-plugins_0.9.0.3-1_mips.deb
[[ $? == 0 ]] && echo "extracted $arch olsrd-plugins." >>$log || echo "extraction of $arch olsrd-plugins failed" >>$log
fi

if [ $arch == 'mipsel' ]; then
# base64: olsrd_0.9.0.3-1_mipsel.deb
echo "
" | base64 -d > $cfgusrdir/olsrd_0.9.0.3-1_mipsel.deb
[[ $? == 0 ]] && echo "extracted $arch olsrd." >>$log || echo "extraction of $arch olsrd failed" >>$log
# base64: olsrd-plugins_0.9.0.3-1_mipsel.deb
echo "
" | base64 -d > $cfgusrdir/olsrd-plugins_0.9.0.3-1_mipsel.deb
[[ $? == 0 ]] && echo "extracted $arch olsrd-plugins." >>$log || echo "extraction of $arch olsrd-plugins failed" >>$log
fi
echo "extracted packages olsrd and olsrd-plugins" >>$log

echo "Finished Wizard-Installation Block ... $(date +%Y-%m-%d/%H:%M:%S.%N)" >>$log
sed -i '/^#base64begin/,/^#base64end$/d' $0
# !dont edit or remove this comment!
#base64end

function valid_ip() {
    local  ip=$1
    local  stat=1
    if [[ $ip =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
        OIFS=$IFS
        IFS='.'
        ip=($ip)
        IFS=$OIFS
        [[ ${ip[0]} -le 255 && ${ip[1]} -le 255 \
            && ${ip[2]} -le 255 && ${ip[3]} -le 255 ]]
        stat=$?
    fi
    return $stat
}

installolsrd () {
    #mips or mipsel?
    [ $(echo -n I | od -to2 | awk '{ print substr($2,6,1); exit}') == 0 ] && arch='mips' || arch='mipsel'
    #version of install files?
    version_latest_ondisk=$(ls /config/user-data/olsrd_*_${arch}.deb 2>/dev/null | cut -d_ -f2 | sort -r | head -1)
    if [ -n ${version_latest_ondisk} ]; then
        ver=${version_latest_ondisk}
        olsrdpkg="${cfgusrdir}olsrd_${ver}_${arch}.deb"
        olsrdplgpkg="${cfgusrdir}olsrd-plugins_${ver}_${arch}.deb"
    fi
    if [ -n ${ver} ] && [ -f ${cfgusrdir}olsrd_${ver}_${arch}.deb ] && [ -f ${cfgusrdir}olsrd-plugins_${ver}_${arch}.deb ]; then
        # fix the pid-file to match the process id running in order to mark init.d#restart work properly
        running=$(ps aux | grep olsrd4 | grep -v grep | awk '{print $2'}) 2>/dev/null
        if [ "$running" ]; then
          pidfile=$(cat /var/run/olsrd.pid 2>/dev/null)
          if [ "$pidfile" ]; then
            if [ $running -eq $pidfile ]; then
              echo "Compared PIDs from process ("$running") and pid-file ("$pidfile"): all is fine" >>$log
            else
              echo "PID from process ("$running") not matching pid-file ("$pidfile")!" >>$log
              echo "Killing process..." >>$log
              kill $running
              echo "Removing pidfile..." >>$log
              rm -f /var/run/olsrd.pid >>$log 2>>$log
              echo "Starting process..." >>$log
              /etc/init.d/olsrd start
              echo "PID done..." >>$log
            fi
          else
            echo "No PID for process ("$running") found!" >>$log
            echo "Killing process..." >>$log
            kill $running
            echo "Starting process..." >>$log
            /etc/init.d/olsrd start
            echo "PID done..." >>$log
          fi
        else
          echo "PID-Check: no process running." >>$log
          [ -f /var/run/olsrd.pid ] && echo Removing PID-file >>$log && rm /var/run/olsrd.pid >>$log 2>>$log
        fi
        #
        #install using force-overwrite
        dpkg --force-overwrite -i ${olsrdpkg}  ${olsrdplgpkg} >>$log 2>>$log
        statusolsrd=$?
        ####PATCH TEMPORARY####
             #replair olsrd-watchdog file
             [ -f /etc/olsrdwatchdog ] && [ ! -f /etc/olsrd/watchdog ] &&  mv /etc/olsrdwatchdog /etc/olsrd/watchdog && chmod 755 /etc/olsrd/watchdog || rm /etc/olsrdwatchdog 2>/dev/null
             #fix paths on /etc/init.d/olsrd
             sed -i 's/\/etc\/olsrdwatchdog/\/etc\/olsrd\/watchdog/g' /etc/init.d/olsrd
             sed -i 's/\/config\/user-data\/olsrd4\.conf/\/config\/olsrd\/olsrd4\.conf/g' /etc/init.d/olsrd
             #fix paths on /etc/olsrd/watchdog
             sed -i 's/\/config\/user-data\/olsrd4\.conf/\/config\/olsrd\/olsrd4\.conf/g' /etc/olsrd/watchdog
             #fix on /etc/init.d/olsrd
             sed -i 's/\> 0 \]/\\\> 0 \]/g' /etc/init.d/olsrd
             # 
        ####PATCH END####
        if [[ $statusolsrd == 0 ]]; then
            echo "success: packages olsrd and olsrd-plugins installed correctly. done." >>$log
            return 0
        else
            echo "error: problem installing olsrd or olsrd-plugins." >>$log
            return 1
        fi
    else
        echo "error on install(): no olsrd package found in /config/user-data." >>$log
        return 1
    fi
}

setupv4olsrd () {
    #on first install, on migration: create config dir and file
    [ -d $olsrddir ] || mkdir $olsrddir
    [ -f $olsrd4conf ] || cp /etc/olsrd/olsrd.conf $olsrd4conf
    if [ -f $olsrd4def ]; then
        #on update: restore olsrd-default (for START_OLSRD and DAEMON_OPT)
        cp $olsrd4def /etc/default/olsrd
    else
        #on first install, on migration: add config-file to olsrd-detault and save it in config dir
        olsrd4cnfesc=$(echo $olsrd4conf | sed -e 's/[\/&]/\\&/g')
        sed -i '/DAEMON_OPTS/'"s/\".*/\"-d \$DEBUGLEVEL -f $olsrd4cnfesc\"/" /etc/default/olsrd
        cp /etc/default/olsrd $olsrd4def
    fi
    #on migration
    #migrate settings from former olsrd4.conf and olsrd4.default (this will happen only once)
    [ -f /config/user-data/olsrd.default ] && conffile=$(awk -F"-f " '/DAEMON_OPTS/{print $2}' /config/user-data/olsrd.default | tr -d \") || conffile=""
    if [ "$conffile" ]; then
        # active interfaces in -i section
        settings=$(sed -e 's/[ \t]*#.*$//' -e '/^[ ]*$/d' $conffile | sed -n '/^[ \t]*interfacedefaults/I,/}/p')
        mode=$(echo "$settings" | grep -i mode | awk '{print $2}' | tr -d '"')
        autodetectchanges=$(echo "$settings" | grep -i AutoDetectChanges | awk '{print $2}' | tr -d '"')
        defaultLQ=$(echo "$settings" | grep -iE "LinkQualityMult .*default" | awk '{print $3}' | tr -d '"')
        for int in $(grep -E 'MESH_IF.*=.*"' /config/user-data/olsrd.default | awk -F'=' '{print $2}' | tr -d '"'); do
          echo "## $int ##"
          [ "$mode" ] && echo Mode: $mode && new1='    Mode "'$mode'"\n' || new1=""
          [ "$autodetectchanges" ] && echo autodetectchanges: $autodetectchanges && new2='    AutoDetectChanges '$autodetectchanges'\n' || new2=""
          [ "$defaultLQ" ] && echo LinkQualityMult-Default: $defaultLQ && new3='    LinkQualityMult default '$defaultLQ'\n' || new3=""
          sed -i '/#interfacesection-end/'"s/#interfacesection-end/Interface \"$int\" {\n$new1$new2$new3}\n#interfacesection-end/" $olsrd4conf
        done
        #
        # active interfaces and its settings from olsrd4.conf
        for int in $(sed -e 's/[ \t]*#.*$//' -e '/^[ ]*$/d' $conffile | grep -iw interface); do
          int=$(echo $int | tr -d '"' | tr '[:upper:]' '[:lower:]')
          [[ "$int" =~ 'nterface' ]] && continue
          [[ "$int" =~ '{' ]] && continue
          settings=$(sed -e 's/[ \t]*#.*$//' -e '/^[ ]*$/d' $conffile | sed -n '/^[ \t]*interface .*'$int'.*$/I,/}/p')
          mode=$(echo "$settings" | grep -i mode | awk '{print $2}' | tr -d '"')
          autodetectchanges=$(echo "$settings" | grep -i AutoDetectChanges | awk '{print $2}' | tr -d '"')
          defaultLQ=$(echo "$settings" | grep -iE "LinkQualityMult .*default" | awk '{print $3}' | tr -d '"')
          echo "## $int ##"
          [ "$mode" ] && echo Mode: $mode && new1='    Mode "'$mode'"\n' || new1=""
          [ "$autodetectchanges" ] && echo autodetectchanges: $autodetectchanges && new2='    AutoDetectChanges '$autodetectchanges'\n' || new2=""
          [ "$defaultLQ" ] && echo LinkQualityMult-Default: $defaultLQ && new3='    LinkQualityMult default '$defaultLQ'\n' || new3=""
          sed -i '/#interfacesection-end/'"s/#interfacesection-end/Interface \"$int\" {\n$new1$new2$new3}\n#interfacesection-end/" $olsrd4conf
        done
        #
        # LQs and HNAs
        customLQ=$(sed -e 's/[ \t]*#.*$//' -e '/^[ ]*$/d' $conffile | grep -i linkqualitymult | grep -vi default | sed -e 's/$/\\/g')
        [ "$customLQ" ] && echo -e "## customLQ ##\n$customLQ"
        [ "$customLQ" ] && sed -i "/InterfaceDefaults/,/^}/s/^}/$customLQ \n}/g" $olsrd4conf
        hna4=$(sed -e 's/[ \t]*#.*$//' -e '/^[ ]*$/d' $conffile | sed -n '/^[ \t]*hna4/I,/}/p' | grep -E "([0-9]{1,3}\.){3}[0-9]{1,3}" | sed -e 's/$/\\/g')
        [ "$hna4" ] && echo -e "## hna4 ##\n$hna4"
        [ "$hna4" ] && sed -i "/Hna4/,/^}/s/^}/$hna4 \n}/g" $olsrd4conf
        #
        #enabled on boot
        startonboot=$(sed -e 's/[ \t]*#.*$//' -e '/^[ ]*$/d' /config/user-data/olsrd.default 2>/dev/null | grep -icE "START_OLSRD[ \t]*=[ \"\t]*YES")
        [ "$startonboot" -eq 1 ] && echo "## start-on-boot ##"
        [ "$startonboot" -eq 1 ] && sed -i 's/.*START_OLSRD.*/START_OLSRD="YES"/' /etc/default/olsrd || sed -i 's/.*START_OLSRD.*/#START_OLSRD="YES"/' etc/default/olsrd
        #
        ############ IMPLEMENT
        #plugins and pluginparameters, watchdog!?
        plugins=$(sed -e 's/[ \t]*#.*$//' -e '/^[ ]*$/d' /config/user-data/olsrd4.conf | grep -iw loadplugin | awk '{print $2}' | cut -d '.' -f1 | tr -d '"')
        if [ "$plugins" ]; then
          for plugin in $plugins; do
            file=$(ls -1 /usr/lib/olsrd/$plugin* | tail -1 | cut -d '/' -f5)
            echo "## $plugin ## Filename $file"
            sed -e 's/[ \t]*#.*$//' -e '/^[ ]*$/d' /config/user-data/olsrd4.conf | sed -n '/^[ \t]*loadplugin[ \"\t]*'$plugin'/I,/}/p' | grep -i plparam | awk '{gsub("\"","",$0); print "  "$2"="$3}'
            #plugin part of config?
            # NO-> append
            # YES->un-comment, remove PlParams, insert PlParams
          done
        fi
        #
        ############ IMPLEMENT
        #setupscript
        [ -x /config/scripts/post-config.d/olsrd_setup.sh ] && echo "## setupscript-on ##"
        # write new setup-script -> copy to post-config.d or to /config/olsrd
        #
        #migration done, now avoid to do that again
        #move old files to .bak
        mv /config/user-data/olsrd.default /config/user-data/olsrd.default.bak
        mv $conffile /config/user-data/olsrd4.bak
    fi
}

# function to copy olsrd(ipv4) instance for second(ipv6) instance and reset config to defaults
# because olsrd runs only in ipv4 *OR* ipv6 mode
# (olsrd2 is able to run v4 and v6 in one instance)
setupv6olsrd () {
  echo nix >/dev/null
}

# function called when you click the wizard
load () {
    # rename custom-named wizard to "OLSRd_V1"?
    # issue: after renaming wizard-dir, wizard still has wrong name in webif until relogin ...
    #mv $(dirname $0) $(dirname $0 | rev | cut -d"/" -f2- | rev)/OLSRd_V1

    # try to install olsrd and show status (with version information if installed)
    olsrdpkgstatus="\"pkgstatus\":\"error: not installed.\""
    dpkg -l olsrd olsrd-plugins >>$log 2>>$log
    if [[ $? != 0 ]]; then
        echo "olsrd packages not installed! need to install packages." >>$log
        installolsrd
        if [[ $? == 0 ]]; then
            setupv4olsrd
            setupv6olsrd
            echo "olsrd packages installed and configured. all done." >>$log
            olsrdpkgstatus="\"pkgstatus\":\"success: running olsrd installation ... completed.\""
        else
            olsrdpkgstatus="\"pkgstatus\":\"error: not installed, download or install problem. check $log\""
        fi
    else
        echo "olsrd packages already installed! checking for new version on disk..." >>$log
        # check if latest version is installed from packages available in $cfgusrdir
        version_installed=$(dpkg -l olsrd | awk '/ii/ { print $3 }')
        version_latest_ondisk=$(ls /config/user-data/olsrd_* | cut -d_ -f2 | sort -r | head -1)
        ## each separate version number must be less than 3 digit wide for this function!
        function version { echo "$@" | awk -F. '{ printf("%03d%03d%03d\n", $1,$2,$3); }'; }
        if [ "$(version "${version_latest_ondisk:0:5}")" -gt "$(version "${version_installed:0:5}")" ]; then
            echo "new olsrd packages found, trying to install packages." >>$log
            installolsrd
            if [[ $? == 0 ]]; then
                setupv4olsrd
                setupv6olsrd
                echo "olsrd packages installed and configured. done." >>$log
            fi
        else
            echo "latest available olsrd packages are already installed. (found in $cfgusrdir)" >>$log
        fi
        olsrdver=$(dpkg -l olsrd | awk '/ii/ { print $3 }')
        olsrdplgver=$(dpkg -l olsrd-plugins | awk '/ii/ { print $3 }')
        echo "latest available olsrd installed and configured. all done." >>$log
        olsrdpkgstatus="\"pkgstatus\":\"success: packages olsrd $olsrdver and olsrd-plugins $olsrdplgver installed.\""
    fi

    #
    # get network status of daemon(s) if running
    #
    v4netstatus=$(netstat -4aunp | grep -iv olsrd2 | awk '/olsrd/ { print $4" "$6;exit }')
    if [ -z "$v4netstatus" ]; then
        v4netstatus=$(ps aux | grep -vE "olsrd2|awk" | awk '/olsrd/ {print $13}' | head -n1)
        if [ "$v4netstatus" ]; then
            v4netstatus="running/"$v4netstatus" inactive"
        else
            v4netstatus="not running"
        fi
    fi
    v6netstatus=$(netstat -6aunp | grep -iv olsrd2 | awk '/olsrd/ { print $4" "$6;exit }')
    if [ -z "$v6netstatus" ]; then v6netstatus="not running"; fi
    olsrddaemonstatus="\"daemonstatus\":\"IPv4: ${v4netstatus//\//-}. IPv6: ${v6netstatus//\//-}.\""

    # post-config script in case of firmware upgrade
    olsrdsetupscript='"olsrdsetupscript":""'
    if [[ -w $olsrdsetupscriptfile ]]; then
        olsrdsetupscript='"olsrdsetupscript":"on"'
    fi

    ###############################
    #  IPv4 OLSRd LOAD function   #
    ###############################
    # get current olsrd4 configuration and return configured values to wizard.html
    [[ -w $olsrd4default && $(grep START_OLSRD $olsrd4default) != \#* ]] && olsrd4enabled='"olsrd4enabled":"on",' || olsrd4enabled='"olsrd4enabled":"",'

    defrunlvl=$(grep initdefault /etc/inittab | cut -d: -f2)
    [[ $(ls /etc/rc$defrunlvl.d/S*olsrd) ]] && olsrd4runonboot='"olsrd4runonboot":"on",' || olsrd4runonboot='"olsrd4runonboot":"",'

    # get all running ethernet interfaces in format eth0;192.168.1.1/24
    olsrd4meshif=$(awk -F" " '/^Interface.*\{/ {print $2}' $olsrd4conf | tr -d \")
    olsrd4interfaces=''
    v4interfacelist=$(ip -f inet addr | awk '/^[0-9]:*|inet/ { print $2 }' | sed ':a;N;$!ba;s/:\n/;/g' | grep ";")
    for v4if in $v4interfacelist; do
        v4ifinterface=$(echo $v4if | cut -d";" -f1)
        v4ifaddress=$(echo $v4if | cut -d";" -f2)
        # remove trailing @interfacename if occurred (eg. when defining vlans)
        v4ifinterface=$(echo ${v4ifinterface} | cut -d@ -f1)
        # skip loopback and physical switch interfaces
        [[ "${v4ifinterface}" == "lo" ]] && continue
        [[ "${v4ifinterface}" == "switch0" ]] && continue
        intfstatus=''
        for mintf in $olsrd4meshif; do
            [[ "$mintf" == "${v4ifinterface}" ]] && intfstatus='"enabled":"on",' && break
        done
        olsrd4interfaces=$olsrd4interfaces'{'$intfstatus'"olsrd4interface":"'${v4ifinterface}'","ipv4address":"'${v4ifaddress}'"},'
    done
    olsrd4interfaces=${olsrd4interfaces%","}
    olsrd4ip4broadcast="\"olsrd4Ip4Broadcast\":\"$(awk '/Ip4Broadcast/ { print $2 }' $olsrd4conf)\","
    olsrd4hna="\"olsrd4Hna\":\"$(sed -n '/Hna4/,/}/p' $olsrd4conf | sed '1,2d;$d' | sed '/\s*#.*$/d' | sed ':a;N;$!ba;s/\n/;/g')\","
    olsrd4plugins=''
    olsrd4plgtxtinfo='"olsrd4plgtxtinfo":"",'
    if [[ $(grep LoadPlugin.*olsrd_txtinfo $olsrd4conf) != \#* ]]; then
        olsrd4plgtxtinfo='"olsrd4plgtxtinfo":"on",'
    fi
    olsrd4plgjsoninfo='"olsrd4plgjsoninfo":"",'
    if [[ $(grep LoadPlugin.*olsrd_jsoninfo $olsrd4conf) != \#* ]]; then
        olsrd4plgjsoninfo='"olsrd4plgjsoninfo":"on",'
    fi
    olsrd4plghttpinfo='"olsrd4plghttpinfo":"",'
    if [[ $(grep LoadPlugin.*olsrd_httpinfo $olsrd4conf) != \#* ]]; then
        olsrd4plghttpinfo='"olsrd4plghttpinfo":"on",'
    fi
    if [ $(grep -c LoadPlugin.*olsrd_watchdog $olsrd4conf) \> 0 ] && [[ $(grep LoadPlugin.*olsrd_watchdog $olsrd4conf) != \#* ]]; then
        olsrd4watchdog='"olsrd4watchdog":"on",'
    fi
    olsrd4plugins=$olsrd4plugins$olsrd4plgtxtinfo$olsrd4plgjsoninfo$olsrd4plghttpinfo$olsrd4watchdog
    
    #seperate to array
    olsrd4lqmult="\"olsrd4LinkQualityMult\":\"$(egrep -v "^[[:space:]]*#" $olsrd4conf | awk '/LinkQualityMult/ { print $2" "$3";" }' | sed ':a;N;$!ba;s/\n//g')\","


    ## OLSRD6 missing here!


    # if one of enabled interfaces is a bridge, drop forwarded ethernet frames, else accept
    if [[ $olsrd4meshif == *"br"* ]] || [[ $(grep ^MESH_IF $olsrd6default 2>/dev/null) == *"br"* ]]; then
        if [[ $(grep -E "^ebtables\ \-P\ FORWARD\ DROP" /config/scripts/pre-config.d/ebtables.sh 2>/dev/null | wc -l) == 0 ]]; then
            if [ ! -d /config/scripts/pre-config.d ]; then
                # create missing directory
                mkdir /config/scripts/pre-config.d >>$log 2>>$log
                chmod --reference=/config/scripts/post-config.d /config/scripts/pre-config.d >>$log 2>>$log
                chown --reference=/config/scripts/post-config.d /config/scripts/pre-config.d >>$log 2>>$log
            fi
            if [ ! -f /config/scripts/pre-config.d/ebtables.sh ]; then
                #create file
                echo -e '#!/bin/sh\n#olsrdwizard: dont forward ethernet frames between bridge ports\nebtables -P FORWARD DROP\nexit 0' > /config/scripts/pre-config.d/ebtables.sh
                chmod 755 /config/scripts/pre-config.d/ebtables.sh
            else
                #add lines to file on top
                linenumber=2
                sed -i $linenumber'i\
#olsrdwizard: dont forward ethernet frames between bridge ports\
ebtables -P FORWARD DROP' /config/scripts/pre-config.d/ebtables.sh >>$log 2>>$log
            fi
            ebtables -P FORWARD DROP
        fi
    else
        if [[ $(grep -E "^#olsrdwizard:|^ebtables\ \-P\ FORWARD\ DROP" /config/scripts/pre-config.d/ebtables.sh 2>/dev/null | wc -l) == 2 ]]; then
            sed -i '/^#olsrdwizard:.*/d' /config/scripts/pre-config.d/ebtables.sh
            sed -i '/^ebtables\ \-P\ FORWARD\ DROP/d' /config/scripts/pre-config.d/ebtables.sh
            ebtables -P FORWARD ACCEPT
        fi
    fi


    ####### wizard version check against github
    #
    olsrdwizard=""
    for i in $(find /config/wizard/feature/ -name wizard.html | grep -i olsr); do
        if [[ $(head $i -n 10 | grep 'OLSRd_V1') ]]; then
            olsrdwizard=$i
            break
        fi
    done
    if [ ! $olsrdwizard ]; then
        updatetext="error: OLSRd_V1 wizard.html not found!" >>$log 2>>$log
    else
        CURRENTVERSION=$(head -n 8 $olsrdwizard | grep -i versioninfo= | awk -F"=" {'print $2'})
        if [ $((onlinecheck)) = 0 ]; then
            GITVERSION=$(curl -sL --connect-timeout 2 --speed-time 2 https://raw.githubusercontent.com/$gitowner/$gitrepo/$gitbranch/wizard.html | head -n 8 | grep -i versioninfo= | awk -F"=" {'print $2'})
            if [ "$GITVERSION" ] && [ "$CURRENTVERSION" ]; then 
                if [ $(($GITVERSION)) \> $(($CURRENTVERSION)) ]; then 
                    updatetext="new version available: "$GITVERSION", current: "$CURRENTVERSION >>$log 2>>$log
                else
                    updatetext="current version "$CURRENTVERSION" is up-to-date" >>$log 2>>$log
                fi
            else
                updatetext="version info not available. git:"$GITVERSION", current: "$CURRENTVERSION"." >>$log 2>>$log
            fi
        else
            updatetext="version info not available. git:OFFLINE, current: "$CURRENTVERSION"." >>$log 2>>$log
        fi
    fi
    updatestatus='"updatestatus":"'$updatetext'"'
    # end
    ####### wizard version check against github

    # check for autoupdate
    if [ -f /config/user-data/autoupdate.dat ] && [ "$(grep -i "wizard-olsrd_v1=yes" /config/user-data/autoupdate.dat | wc -l)" == "1" ]; then
        autoupdatefromgithub=',"autoupdatefromgithub":"on"'
    fi

    #get emission settings
    olsrdsettings='"olsrdsettings":[{'
    olsrdsettings=$olsrdsettings'"HelloInterval":"'$(awk '/HelloInterval/ {print $2}' $olsrd4conf)'"'
    olsrdsettings=$olsrdsettings',"HelloValidityTime":"'$(awk '/HelloValidityTime/ {print $2}' $olsrd4conf)'"'
    olsrdsettings=$olsrdsettings',"TcValidityTime":"'$(awk '/TcValidityTime/ {print $2}' $olsrd4conf)'"'
    olsrdsettings=$olsrdsettings',"TcInterval":"'$(awk '/TcInterval/ {print $2}' $olsrd4conf)'"'
    olsrdsettings=$olsrdsettings',"MidValidityTime":"'$(awk '/MidValidityTime/ {print $2}' $olsrd4conf)'"'
    olsrdsettings=$olsrdsettings',"MidInterval":"'$(awk '/MidInterval/ {print $2}' $olsrd4conf)'"'
    olsrdsettings=$olsrdsettings',"HnaValidityTime":"'$(awk '/HnaValidityTime/ {print $2}' $olsrd4conf)'"'
    olsrdsettings=$olsrdsettings',"HnaInterval":"'$(awk '/HnaInterval/ {print $2}' $olsrd4conf)'"'
    olsrdsettings=$olsrdsettings',"HnaInterval":"'$(awk '/HnaInterval/ {print $2}' $olsrd4conf)'"'
    olsrdsettings=$olsrdsettings',"Pollrate":"'$(awk '/Pollrate/ {print $2}' $olsrd4conf)'"'
    olsrdsettings=$olsrdsettings'}]'

    # get all variables together for output
    ipv4conf="$olsrd4enabled$olsrd4runonboot$olsrd4ip4broadcast$olsrd4hna$olsrd4lqmult$olsrd4plugins\"olsrd4config\":[$olsrd4interfaces]"
    ipv6conf="$olsrd6enabled$olsrd6runonboot$olsrd6hna$olsrd6lqmult$olsrd6plugins\"olsrd6config\":[$olsrd6interfaces]"
    echo -n "{\"success\":\"1\",\"data\":{ $olsrdpkgstatus,$olsrddaemonstatus,$olsrdsetupscript,$updatestatus$autoupdatefromgithub,$ipv4conf,$ipv6conf,$olsrdsettings },"
    echo "\"definition\":{ }}"
}

# function called when you click apply
apply () {
    # setup script
    olsrdsetupscript=$(jq -M -r '.olsrdsetupscript' $INPUT 2>/dev/null)
    if [[ "$olsrdsetupscript" == "on" ]]; then
        if [[ ! -w $olsrdsetupscript ]]; then
            if [[ -w $cfgusrdir$(basename $olsrdsetupscriptfile) ]]; then
                cp -f $cfgusrdir$(basename $olsrdsetupscriptfile) $olsrdsetupscriptfile >/dev/null 2>/dev/null
                chmod +x $olsrdsetupscriptfile >/dev/null 2>/dev/null
                rm $cfgusrdir$(basename $olsrdsetupscriptfile) >/dev/null 2>/dev/null
            else
                writesetupscript
                cp -f /tmp/olsrdsetupscriptfile $olsrdsetupscriptfile >/dev/null 2>/dev/null
                chmod +x $olsrdsetupscriptfile >/dev/null 2>/dev/null
                rm /tmp/olsrdsetupscriptfile >/dev/null 2>/dev/null
            fi
        fi
    else
        if [[ -w $olsrdsetupscriptfile ]]; then
            cp -f $olsrdsetupscriptfile $cfgusrdir$(basename $olsrdsetupscriptfile) >/dev/null 2>/dev/null
        fi
        rm -f $olsrdsetupscriptfile >/dev/null 2>/dev/null
    fi

    ###############################
    #  IPv4 OLSRd APPLY function  #
    ###############################
    # enable olsrd4, if checked (will start if initscript is triggered) and run daemon on boot (when initscript is called)
    olsrd4enabled=$(jq -M -r '.olsrd4enabled' $INPUT 2>/dev/null)
    if [[ "$olsrd4enabled" == "on" ]]; then
        sed -i 's/.*START_OLSRD.*/START_OLSRD="YES"/' $olsrd4default
    else
        sed -i 's/.*START_OLSRD.*/#START_OLSRD="YES"/' $olsrd4default
    fi
    olsrd4runonboot=$(jq -M -r '.olsrd4runonboot' $INPUT 2>/dev/null)
    defrunlvl=$(grep initdefault /etc/inittab | cut -d: -f2)
    if [[ "$olsrd4runonboot" == "on" ]]; then
        if [[ ! -e $(ls /etc/rc$defrunlvl.d/S*olsrd) ]]; then
            update-rc.d olsrd defaults >> /dev/null
        fi
    else
        if [[ -e $(ls /etc/rc$defrunlvl.d/S*olsrd) ]]; then
            update-rc.d -f olsrd remove >> /dev/null
        fi
    fi
    # set checked interfaces, else set default interface
    enabledv4interfaces="$(jq -M -r '.olsrd4config[] | select(.enabled=="on") | .olsrd4interface' $INPUT 2>/dev/null | grep -vw br9)"
    if [[ ! -z $enabledv4interfaces ]]; then
        enabledv4interfaces=$(echo $enabledv4interfaces | sed 's/\ /\\\ /')
        sed -i "s/^MESH_IF=.*/MESH_IF=\"$enabledv4interfaces\"/" $olsrd4default
    else
        sed -i "s/^MESH_IF=.*/MESH_IF=wlan0/" $olsrd4default
    fi

    if [ $(jq -M -r '.olsrd4config[] | select(.enabled=="on") | .olsrd4interface' $INPUT 2>/dev/null | grep -cw br9) \> 0 ]; then
        #interface eintragen wenn fehlt
        if [ $(grep -c "Interface \"br9\" {" $olsrd4config) -eq 0 ]; then
            linenumber=$(($(grep -n "MprCoverage" /config/user-data/olsrd4.conf | cut -d":" -f1)+1))
            sed     -i $linenumber'i\
Interface "br9" {\
  Mode "silent"\
}' $olsrd4config
        fi
    elif [ $(grep -c "Interface \"br9\" {" $olsrd4config) \> 0 ]; then
        #interface rausnehmen!
        sed -i "/^Interface \"br9\" {/,/^}/d" $olsrd4config
    fi

    # backup /etc/default/olsrd
    cp -f $olsrd4default $cfgusrdir$(basename $olsrd4default).default > /dev/null
    # set ip4broadcast
    olsrd4ip4broadcast=$(jq -M -r '.olsrd4Ip4Broadcast' $INPUT 2>/dev/null)
    #ensure a valid value for ip4broadcast
    valid_ip "$olsrd4ip4broadcast" || olsrd4ip4broadcast='255.255.255.255';
    sed -i "s/Ip4Broadcast.*/Ip4Broadcast\ $olsrd4ip4broadcast/" $olsrd4config
    # set v4 hna and lqmult
    origIFS=$IFS
    IFS=";"
    # hna4 remove all entries in config
    for hna in $(sed -n '/Hna4/,/}/p' $olsrd4config | sed '1,2d;$d' | sed '/\s*#.*$/d' | sed ':a;N;$!ba;s/\n/;/g'); do
        sed -i "/$hna/d" $olsrd4config
    done
    # hna4 add entries from input
    olsrd4hna=$(jq -M -r '.olsrd4Hna' $INPUT 2>/dev/null)
    hna4linenr=$(grep -n "Hna4" $olsrd4config | cut -d: -f1)
    for hna in $olsrd4hna; do
        #ensure that entered values wont kill our olsrd - ignore hnas with wring IP or netmask
        ip=$(echo $hna | cut -d" " -f1)
        valid_ip "$ip" || continue;
        mask=$(echo $hna | cut -d" " -f2)
        valid_ip "$mask" || continue;
        sed -i "$(($hna4linenr+2))i$hna" $olsrd4config
    done
    # lqmult remove all entries in config
    for lqmult in $(grep LinkQualityMult $olsrd4config | sed '/\s*#.*$/d' | sed 's/\s*LinkQualityMult\s*//' | sed ':a;N;$!ba;s/\n/;/g'); do
        sed -i "/$lqmult/d" $olsrd4config
    done
    # lqmult add entries from input
    olsrd4lqmult=$(jq -M -r '.olsrd4LinkQualityMult' $INPUT 2>/dev/null)
    lqmult4linenr=$(grep -m1 -n LinkQualityMult $olsrd4config | cut -d: -f1)
    for lqmult in $olsrd4lqmult; do
        #ensure that entered values wont kill our olsrd - ignore wring IPs and LQ-values out of range: 0.01 to 0.99
        ip=$(echo $lqmult | cut -d" " -f1)
        valid_ip "$ip" || continue;
        mult=$(echo $lqmult | cut -d" " -f2)
        [[ "$mult" =~ ^[0-9]+(\.[0-9]+)?$ ]] || continue;
        [ $(printf "$mult\n1\n" | sort -g | tail -1) -eq 1 ] || continue;
        sed -i "$(($lqmult4linenr+1))iLinkQualityMult\ $lqmult" $olsrd4config
    done
    IFS=$origIFS
    olsrd4plgtxtinfo=$(jq -M -r '.olsrd4plgtxtinfo' $INPUT 2>/dev/null)
    if [[ "$olsrd4plgtxtinfo" == "on" ]]; then
        if [[ $(grep LoadPlugin.*olsrd_txtinfo $olsrd4config) == \#* ]]; then
            sed -i "/LoadPlugin\ \"olsrd_txt/,/}/"'s/^#//' $olsrd4config
        fi
    else
        if [[ $(grep LoadPlugin.*olsrd_txtinfo $olsrd4config) != \#* ]]; then
            sed -i "/LoadPlugin\ \"olsrd_txt/,/}/"'s/^/#/' $olsrd4config
        fi
    fi
    olsrd4plgjsoninfo=$(jq -M -r '.olsrd4plgjsoninfo' $INPUT 2>/dev/null)
    if [[ "$olsrd4plgjsoninfo" == "on" ]]; then
        if [[ $(grep LoadPlugin.*olsrd_jsoninfo $olsrd4config) == \#* ]]; then
            sed -i "/LoadPlugin\ \"olsrd_json/,/}/"'s/^#//' $olsrd4config
        fi
    else
        if [[ $(grep LoadPlugin.*olsrd_jsoninfo $olsrd4config) != \#* ]]; then
            sed -i "/LoadPlugin\ \"olsrd_json/,/}/"'s/^/#/' $olsrd4config
        fi
    fi
    olsrd4plghttpinfo=$(jq -M -r '.olsrd4plghttpinfo' $INPUT 2>/dev/null)
    if [[ "$olsrd4plghttpinfo" == "on" ]]; then
        if [[ $(grep LoadPlugin.*olsrd_httpinfo $olsrd4config) == \#* ]]; then
            sed -i "/LoadPlugin\ \"olsrd_http/,/}/"'s/^#//' $olsrd4config
            sed -i "/LoadPlugin\ \"olsrd_http/,/}/"'s/#PlParam "Port" "8080"/PlParam "Port" "8080"/' $olsrd4config
            sed -i "/LoadPlugin\ \"olsrd_http/,/}/"'s/#PlParam "Net" "0.0.0.0 0.0.0.0"/PlParam "Net" "0.0.0.0 0.0.0.0"/' $olsrd4config
        fi
    else
        if [[ $(grep LoadPlugin.*olsrd_httpinfo $olsrd4config) != \#* ]]; then
            sed -i "/LoadPlugin\ \"olsrd_http/,/}/"'s/^/#/' $olsrd4config
        fi
    fi
    olsrd4watchdog=$(jq -M -r '.olsrd4watchdog' $INPUT 2>/dev/null)
    if [[ "$olsrd4watchdog" == "on" ]]; then
        if [ $(grep -c LoadPlugin.*olsrd_watchdog $olsrd4config) -eq 0 ]; then
            echo '#LoadPlugin "olsrd_watchdog.so.0.1"
#{
  #PlParam "file" "/tmp/olsrd.watchdog"
  #PlParam "interval" "5"
#}
' >>$olsrd4config
        fi
        if [[ $(grep LoadPlugin.*olsrd_watchdog $olsrd4config) == \#* ]]; then
            sed -i "/LoadPlugin\ \"olsrd_watchdog/,/}/"'s/^#//' $olsrd4config
            sed -i "/LoadPlugin\ \"olsrd_watchdog/,/}/"'s/#PlParam "file" "\/tmp\/olsrd.watchdog"/PlParam "file" "\/tmp\/olsrd.watchdog"/' $olsrd4config
            sed -i "/LoadPlugin\ \"olsrd_watchdog/,/}/"'s/#PlParam "interval" "5"/PlParam "interval" "5"/' $olsrd4config
            date "+%s" >/tmp/olsrd.watchdog
            touch /tmp/olsrd.watchdog.compare
        fi
    else
        if [ $(grep -c LoadPlugin.*olsrd_watchdog $olsrd4config) \> 0 ] && [[ $(grep LoadPlugin.*olsrd_watchdog $olsrd4config) != \#* ]]; then
            sed -i "/LoadPlugin\ \"olsrd_watchdog/,/}/"'s/^/#/' $olsrd4config
        fi
    fi
    #add cronjob? if missing, olsrd-autostart=on, executeable watchdogscript 
    if [ ! -f /etc/cron.d/olsrdwatchdog ] &&
       [ -f $olsrd4default ] && [ $(cat $olsrd4default | cut -d "#" -f 1 | grep -c START_OLSRD=\"YES\") \> 0 ] &&
       [ $(cat $olsrd4config | cut -d "#" -f 1 | grep -c LoadPlugin.*olsrd_watchdog) \> 0 ] &&
       [ -x /etc/olsrdwatchdog ] ; then
      echo add watchdog to crontab >>$log
      echo "*   *  *   *   *   root  /etc/olsrdwatchdog >/dev/null 2>/dev/null" >/etc/cron.d/olsrdwatchdog
      chmod 644 /etc/cron.d/olsrdwatchdog
    fi
    #need to remove cronjob?
    if [ ! -f $olsrd4default ] || 
       [ $(cat $olsrd4default | cut -d "#" -f 1 | grep -c START_OLSRD=\"YES\") -eq 0 ] ||
       [ $(cat $olsrd4config | cut -d "#" -f 1 | grep -c LoadPlugin.*olsrd_watchdog) -eq 0 ] ||
       [ ! -x /etc/olsrdwatchdog ]; then
       if [ -f /etc/cron.d/olsrdwatchdog ]; then
          echo remove watchdog from crontab >>$log
          rm /etc/cron.d/olsrdwatchdog >>$log 2>>$log
       fi
    fi


    ## OLSRD6 missing here


    # if one of enabled interfaces is a bridge, drop forwarded ethernet frames, else accept
    if [[ $(grep ^MESH_IF $olsrd4default) == *"br"* ]] || [[ $(grep ^MESH_IF $olsrd6default) == *"br"* ]]; then
        if [[ $(grep -E "^ebtables\ \-P\ FORWARD\ DROP" /config/scripts/pre-config.d/ebtables.sh 2>/dev/null | wc -l) == 0 ]]; then
            if [ ! -d /config/scripts/pre-config.d ]; then
                # create missing directory
                mkdir /config/scripts/pre-config.d >>$log 2>>$log
                chmod --reference=/config/scripts/post-config.d /config/scripts/pre-config.d >>$log 2>>$log
                chown --reference=/config/scripts/post-config.d /config/scripts/pre-config.d >>$log 2>>$log
            fi
            if [ ! -f /config/scripts/pre-config.d/ebtables.sh ]; then
                #create file
                echo -e '#!/bin/sh\n#olsrdwizard: dont forward ethernet frames between bridge ports\nebtables -P FORWARD DROP\nexit 0' > /config/scripts/pre-config.d/ebtables.sh
                chmod 755 /config/scripts/pre-config.d/ebtables.sh
            else
                #add lines to file on top
                linenumber=2
                sed -i $linenumber'i\
#olsrdwizard: dont forward ethernet frames between bridge ports\
ebtables -P FORWARD DROP' /config/scripts/pre-config.d/ebtables.sh >>$log 2>>$log
            fi
            ebtables -P FORWARD DROP
        fi
    else
        if [[ $(grep -E "^#olsrdwizard:|^ebtables\ \-P\ FORWARD\ DROP" /config/scripts/pre-config.d/ebtables.sh 2>/dev/null | wc -l) == 2 ]]; then
            sed -i '/^#olsrdwizard:.*/d' /config/scripts/pre-config.d/ebtables.sh
            sed -i '/^ebtables\ \-P\ FORWARD\ DROP/d' /config/scripts/pre-config.d/ebtables.sh
            ebtables -P FORWARD ACCEPT
        fi
    fi

    ####### wizard manual update from github
    # update wizard from github
    # load actual sources (ignoring releases)
    updatefromgithub=$(jq -M -r '.updatefromgithub' $INPUT 2>/dev/null)
    olsrdwizard=""
    for i in $(find /config/wizard/feature/ -name wizard.html | grep -i olsr); do
        if [[ $(head $i -n 10 | grep 'OLSRd_V1') ]]; then
            olsrdwizard=$i
            break
        fi
    done
    if [[ "$updatefromgithub" == "on" ]]; then
        echo "update from github requested" >>$log 2>>$log
        if [ ! $olsrdwizard ]; then
            echo "error: OLSRd_V1 wizard.html not found!" >>$log 2>>$log
        elif [ $((onlinecheck)) != 0 ]; then
            echo "currently offline" >>$log 2>>$log
        else
            curl -sL -o /tmp/ER-wizard-OLSRd_V1_latest.tar.gz --connect-timeout 2 --speed-time 2 https://api.github.com/repos/$gitowner/$gitrepo/tarball >>$log 2>>$log
            tar   -xvzf /tmp/ER-wizard-OLSRd_V1_latest.tar.gz -C /tmp >/tmp/result.txt 2>>$log
            rm -f       /tmp/ER-wizard-OLSRd_V1_latest.tar.gz >>$log 2>>$log
            while read LINE; do
              set $LINE
              if [ $(basename $LINE) == "wizard-run" ] || [ $(basename $LINE) == "wizard.html" ] || [ $(basename $LINE) == "validator.json" ]; then W=1; else W=2; fi
              [ -f "/tmp/"$LINE ] && [ $W == "1" ] && cp "/tmp/"$LINE $(dirname $olsrdwizard)"/"$(basename $LINE) >>$log 2>>$log
            done < /tmp/result.txt
            rm /tmp/result.txt >>$log 2>>$log
            rm -Rf /tmp/$gitowner-$gitrepo* >>$log 2>>$log
            chmod 755 $(dirname $olsrdwizard)"/"wizard-run >>$log 2>>$log
            # before current WebGui session will break due to olsrd-install/restart, send success to browser
            echo "{\"success\":\"1\"}"
            ret="99"
            $(dirname $olsrdwizard)"/"wizard-run load >>$log 2>>$log
            echo "EdgeMAX OLSRd_V1 Wizard stopped $(date +%Y-%m-%d/%H:%M:%S.%N) - Session="$$ >>$log
        fi
    fi
    autoupdatefromgithub=$(jq -M -r '.autoupdatefromgithub' $INPUT 2>/dev/null)
    if [[ "$autoupdatefromgithub" == "on" ]]; then
        #check for auto-update wizard, install if not there!!
        wiz=""
        for i in $(find /config/wizard/feature/ -name wizard.html); do
            if [[ $(head $i -n 10 | grep "ER-wizard-AutoUpdate") ]]; then
                wiz=$i
                break
            fi
        done
        if [ ! $wiz ]; then 
            #autoupdate-wizard mit scripten fehlt: offline-install
            wiz="/config/wizard/feature/AutoUpdate/wizard.html"
            echo "Installing "$(dirname $wiz)"..." >>$log 2>>$log
            if [ ! -d $(dirname $wiz) ]; then 
                mkdir $(dirname $wiz) >>$log 2>>$log
                chmod --reference=$(dirname $olsrdwizard) $(dirname $wiz) >>$log 2>>$log
                chown --reference=$(dirname $olsrdwizard) $(dirname $wiz) >>$log 2>>$log
            fi
            #extract offline --> replaces download-procedure, Version 20171122, https://github.com/pocki80/ER-wizard-AutoUpdate
            echo "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
" | base64 -d >/tmp/ER-wizard.tar.gz 2>>$log
            tar   -xvzf /tmp/ER-wizard.tar.gz -C /tmp >/tmp/result.txt 2>>$log
            rm -f       /tmp/ER-wizard.tar.gz >>$log 2>>$log
            while read LINE; do
                set $LINE
                if [ $(basename $LINE) == "wizard-run" ] || [ $(basename $LINE) == "wizard.html" ] || [ $(basename $LINE) == "validator.json" ]; then W=1; else W=2; fi
                if [ -f "/tmp/"$LINE ] && [ $W == "1" ]; then
                    sudo cp "/tmp/"$LINE $(dirname $wiz)"/"$(basename $LINE) >>$log 2>>$log
                    sudo chmod --reference=$(dirname $olsrdwizard)"/"$(basename $LINE) $(dirname $wiz)"/"$(basename $LINE) >>$log 2>>$log
                    sudo chown --reference=$(dirname $olsrdwizard)"/"$(basename $LINE) $(dirname $wiz)"/"$(basename $LINE) >>$log 2>>$log
                fi
            done < /tmp/result.txt
            rm /tmp/result.txt
            rm -Rf /tmp/$git2owner-$git2repo* >>$log 2>>$log
            chmod 755 $(dirname $wiz)"/"wizard-run >>$log 2>>$log
            echo "Installing done, now triggering initial load..." >>$log 2>>$log
            $(dirname $wiz)"/"wizard-run load  >>$log 2>>$log
        fi
        #remove "no" if exists
        if [ -f /config/user-data/autoupdate.dat ] &&
           [ "$(grep -i "wizard-olsrd_v1=no" /config/user-data/autoupdate.dat |wc -l)" == "1" ]; then
            linenumber=$(grep -ni "wizard-olsrd_v1=no" /config/user-data/autoupdate.dat | awk -F: {'print $1'})
            sed -i $linenumber'd' /config/user-data/autoupdate.dat 2>>$log
            sed -i '/^$/d' /config/user-data/autoupdate.dat 2>>$log
        fi
        if [ ! -f /config/user-data/autoupdate.dat ]; then
            #create settings file if missing
            echo 'wizard-olsrd_v1=yes' >/config/user-data/autoupdate.dat 2>>$log
            echo '' >>/config/user-data/autoupdate.dat 2>>$log
            sed -i '/^$/d' /config/user-data/autoupdate.dat 2>>$log
        else
            #add yes line if missing
            if [ "$(grep -i "wizard-olsrd_v1=yes" /config/user-data/autoupdate.dat |wc -l)" == "0" ]; then
                echo 'wizard-olsrd_v1=yes' >>/config/user-data/autoupdate.dat 2>>$log
                echo '' >>/config/user-data/autoupdate.dat 2>>$log
                sed -i '/^$/d' /config/user-data/autoupdate.dat 2>>$log
            fi
        fi
    else
        #remove yes line if exists
        if [ -f /config/user-data/autoupdate.dat ] &&
           [ "$(grep -i "wizard-olsrd_v1=yes" /config/user-data/autoupdate.dat |wc -l)" == "1" ]; then
            linenumber=$(grep -ni "wizard-olsrd_v1=yes" /config/user-data/autoupdate.dat | awk -F: {'print $1'})
            sed -i $linenumber'd' /config/user-data/autoupdate.dat 2>>$log
            sed -i '/^$/d' /config/user-data/autoupdate.dat 2>>$log
        fi
    fi
    # end
    ####### wizard manual update from github

    olsrdrestartnow=$(jq -M -r '.olsrdrestartnow' $INPUT 2>/dev/null)
    olsrdrestart6now=$(jq -M -r '.olsrdrestart6now' $INPUT 2>/dev/null)
    if [[ "$olsrdrestartnow" == "on" ]]; then
        # fix the pid-file to match the process id running in order to mark init.d#restart work properly
        running=$(ps aux | grep olsrd4 | grep -v grep | awk '{print $2'}) 2>/dev/null
        if [ "$running" ]; then
          pidfile=$(cat /var/run/olsrd.pid 2>/dev/null)
          if [ "$pidfile" ]; then
            if [ $running -eq $pidfile ]; then
              echo "Compared PIDs from process ("$running") and pid-file ("$pidfile"): all is fine - restarting" >>$log
              $olsrd4init restart >>$log
            else
              echo "PID from process ("$running") not matching pid-file ("$pidfile")!" >>$log
              echo "Killing process..." >>$log
              kill $running
              echo "Removing pidfile..." >>$log
              rm -f /var/run/olsrd.pid >>$log 2>>$log
              echo "Starting process..". >>$log
              /etc/init.d/olsrd start
              echo "PID done..." >>$log
            fi
          else
            echo "No PID for process ("$running") found!" >>$log
            echo "Killing process..." >>$log
            kill $running
            echo "Starting process..." >>$log
            /etc/init.d/olsrd start
            echo "PID done..." >>$log
          fi
        else
          echo "PID-Check: no process running." >>$log
          [ -f /var/run/olsrd.pid ] && echo Removing PID-file >>$log && rm /var/run/olsrd.pid >>$log 2>>$log
          echo "Starting process..." >>$log
          $olsrd4init start >>$log
          echo "PID done..." >>$log
        fi
        # restart daemon v4
    fi
    if [[ "$olsrdrestart6now" == "on" ]]; then
        # restart daemon v6
        $olsrd6init restart >>$log
    fi

    # for debugging purposes
    cp $INPUT /tmp/result.json 2>/dev/null

    if [ "$ret" == "99" ]; then
        echo "result already sent, so do nothing here" >/dev/null
    else
        echo '{"success":"1"}'
    fi

}

case "$ACTION" in
    load)
        load
        ;;
    apply)
        apply
        ;;
esac

echo "EdgeMAX OLSRd_V1 Wizard ended $(date +%Y-%m-%d/%H:%M:%S.%N) - Session="$$ >>$log

# call arguments verbatim:
#$@
